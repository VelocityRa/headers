typedef struct _HEAP_UNPACKED_ENTRY
{
  union
  {
    struct
    {
      U16 Size;
      U8 Flags;
      U8 SmallTagIndex;
    }; 
    U32 SubSegmentCode;
  }; 
  U16 PreviousSize;
  union
  {
    U8 SegmentOffset;
    U8 LFHFlags;
  }; 
  U8 UnusedBytes;
} HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY; 

typedef struct _HEAP_EXTENDED_ENTRY
{
  union
  {
    struct
    {
      U16 FunctionIndex;
      U16 ContextValue;
    }; 
    U32 InterceptorValue;
  }; 
  U16 UnusedBytesLength;
  U8 EntryOffset;
  U8 ExtendedBlockSignature;
} HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY; 

typedef struct _HEAP_ENTRY
{
  union
  {
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      U16 Size;
      U8 Flags;
      U8 SmallTagIndex;
    }; 
    struct
    {
      U32 SubSegmentCode;
      U16 PreviousSize;
      union
      {
        U8 SegmentOffset;
        struct
        {
          U8 LFHFlags;
          U8 UnusedBytes;
        }; 
      }; 
    }; 
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      U16 FunctionIndex;
      U16 ContextValue;
    }; 
    struct
    {
      U32 InterceptorValue;
      U16 UnusedBytesLength;
      U8 EntryOffset;
      U8 ExtendedBlockSignature;
    }; 
    struct
    {
      U32 Code1;
      union
      {
        struct
        {
          U16 Code2;
          U8 Code3;
          U8 Code4;
        }; 
        U32 Code234;
      }; 
    }; 
    U64 AgregateCode;
  }; 
} HEAP_ENTRY, *PHEAP_ENTRY; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _HEAP_SEGMENT
{
  struct _HEAP_ENTRY Entry;
  U32 SegmentSignature;
  U32 SegmentFlags;
  struct _LIST_ENTRY SegmentListEntry;
  struct _HEAP* Heap;
  void* BaseAddress;
  U32 NumberOfPages;
  struct _HEAP_ENTRY* FirstEntry;
  struct _HEAP_ENTRY* LastValidEntry;
  U32 NumberOfUnCommittedPages;
  U32 NumberOfUnCommittedRanges;
  U16 SegmentAllocatorBackTraceIndex;
  U16 Reserved;
  struct _LIST_ENTRY UCRSegmentList;
} HEAP_SEGMENT, *PHEAP_SEGMENT; 

typedef struct _HEAP_COUNTERS
{
  U32 TotalMemoryReserved;
  U32 TotalMemoryCommitted;
  U32 TotalMemoryLargeUCR;
  U32 TotalSizeInVirtualBlocks;
  U32 TotalSegments;
  U32 TotalUCRs;
  U32 CommittOps;
  U32 DeCommitOps;
  U32 LockAcquires;
  U32 LockCollisions;
  U32 CommitRate;
  U32 DecommittRate;
  U32 CommitFailures;
  U32 InBlockCommitFailures;
  U32 PollIntervalCounter;
  U32 DecommitsSinceLastCheck;
  U32 HeapPollInterval;
  U32 AllocAndFreeOps;
  U32 AllocationIndicesActive;
  U32 InBlockDeccommits;
  U32 InBlockDeccomitSize;
  U32 HighWatermarkSize;
  U32 LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; 

typedef struct _HEAP_TUNING_PARAMETERS
{
  U32 CommittThresholdShift;
  U32 MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; 

typedef struct _HEAP
{
  union
  {
    struct _HEAP_SEGMENT Segment;
    struct
    {
      struct _HEAP_ENTRY Entry;
      U32 SegmentSignature;
      U32 SegmentFlags;
      struct _LIST_ENTRY SegmentListEntry;
      struct _HEAP* Heap;
      void* BaseAddress;
      U32 NumberOfPages;
      struct _HEAP_ENTRY* FirstEntry;
      struct _HEAP_ENTRY* LastValidEntry;
      U32 NumberOfUnCommittedPages;
      U32 NumberOfUnCommittedRanges;
      U16 SegmentAllocatorBackTraceIndex;
      U16 Reserved;
      struct _LIST_ENTRY UCRSegmentList;
    }; 
  }; 
  U32 Flags;
  U32 ForceFlags;
  U32 CompatibilityFlags;
  U32 EncodeFlagMask;
  struct _HEAP_ENTRY Encoding;
  U32 Interceptor;
  U32 VirtualMemoryThreshold;
  U32 Signature;
  U32 SegmentReserve;
  U32 SegmentCommit;
  U32 DeCommitFreeBlockThreshold;
  U32 DeCommitTotalFreeThreshold;
  U32 TotalFreeSize;
  U32 MaximumAllocationSize;
  U16 ProcessHeapsListIndex;
  U16 HeaderValidateLength;
  void* HeaderValidateCopy;
  U16 NextAvailableTagIndex;
  U16 MaximumTagIndex;
  struct _HEAP_TAG_ENTRY* TagEntries;
  struct _LIST_ENTRY UCRList;
  U32 AlignRound;
  U32 AlignMask;
  struct _LIST_ENTRY VirtualAllocdBlocks;
  struct _LIST_ENTRY SegmentList;
  U16 AllocatorBackTraceIndex;
  U32 NonDedicatedListLength;
  void* BlocksIndex;
  void* UCRIndex;
  struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  struct _LIST_ENTRY FreeLists;
  struct _HEAP_LOCK* LockVariable;
  void* CommitRoutine;
  void* FrontEndHeap;
  U16 FrontHeapLockCount;
  U8 FrontEndHeapType;
  U8 RequestedFrontEndHeapType;
  U16* FrontEndHeapUsageData;
  U16 FrontEndHeapMaximumIndex;
  volatile U8 FrontEndHeapStatusBitmap[257];
  struct _HEAP_COUNTERS Counters;
  struct _HEAP_TUNING_PARAMETERS TuningParameters;
  S32 __PADDING__[1];
} HEAP, *PHEAP; 

