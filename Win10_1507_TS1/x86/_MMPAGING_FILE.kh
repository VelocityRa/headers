typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef union _SLIST_HEADER
{
  union
  {
    U64 Alignment;
    struct
    {
      struct _SINGLE_LIST_ENTRY Next;
      U16 Depth;
      U16 CpuId;
    }; 
  }; 
} SLIST_HEADER, *PSLIST_HEADER; 

typedef struct _UNICODE_STRING
{
  U16 Length;
  U16 MaximumLength;
  U16* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; 

typedef struct _RTL_AVL_TREE
{
  struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; 

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      struct _RTL_BALANCED_NODE* Left;
      struct _RTL_BALANCED_NODE* Right;
    }; 
  }; 
  union
  {
    U8 Red : 1; 
    U8 Balance : 2; 
    U32 ParentValue;
  }; 
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; 

typedef struct _MMPAGING_FILE
{
  U32 Size;
  U32 MaximumSize;
  U32 MinimumSize;
  U32 FreeSpace;
  U32 PeakUsage;
  U32 HighestPage;
  U32 FreeReservationSpace;
  U32 LargestReserveCluster;
  struct _FILE_OBJECT* File;
  struct _MMMOD_WRITER_MDL_ENTRY* Entry[2];
  union _SLIST_HEADER PfnsToFree;
  struct _UNICODE_STRING PageFileName;
  struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;
  U32 AllocationBitmapHint;
  U32 ReservationBitmapHint;
  U32 LargestNonReservedClusterSize;
  U32 RefreshClusterSize;
  U32 LastRefreshClusterSize;
  U32 ReservedClusterSizeAggregate;
  union
  {
    U32 ToBeEvictedCount;
    U32 HybridPriority;
  }; 
  struct 
  {
    U16 PageFileNumber : 4; 
    U16 WsSwapPagefile : 1; 
    U16 NoReservations : 1; 
    U16 VirtualStorePagefile : 1; 
    U16 SwapSupported : 1; 
    U16 NodeInserted : 1; 
    U16 StackNotified : 1; 
    U16 Spare0 : 5; 
  }; 
  struct 
  {
    U8 AdriftMdls : 1; 
    U8 Spare1 : 7; 
  }; 
  U8 Spare2 : 8; 
  U32 PageHashPages;
  U32 PageHashPagesPeak;
  U32* PageHash;
  void* FileHandle;
  U32 Lock;
  struct _ETHREAD* LockOwner;
  struct _RTL_AVL_TREE FlowThroughReadRoot;
  struct _MI_PARTITION* Partition;
  struct _RTL_BALANCED_NODE FileObjectNode;
} MMPAGING_FILE, *PMMPAGING_FILE; 

