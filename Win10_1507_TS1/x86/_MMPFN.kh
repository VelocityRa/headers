typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      struct _RTL_BALANCED_NODE* Left;
      struct _RTL_BALANCED_NODE* Right;
    }; 
  }; 
  union
  {
    U8 Red : 1; 
    U8 Balance : 2; 
    U32 ParentValue;
  }; 
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _MMPTE_HIGHLOW
{
  U32 LowPart;
  U32 HighPart;
} MMPTE_HIGHLOW, *PMMPTE_HIGHLOW; 

typedef struct _HARDWARE_PTE
{
  union
  {
    struct 
    {
      U64 Valid : 1; 
      U64 Write : 1; 
      U64 Owner : 1; 
      U64 WriteThrough : 1; 
      U64 CacheDisable : 1; 
      U64 Accessed : 1; 
      U64 Dirty : 1; 
      U64 LargePage : 1; 
      U64 Global : 1; 
      U64 CopyOnWrite : 1; 
      U64 Prototype : 1; 
      U64 reserved0 : 1; 
      U64 PageFrameNumber : 26; 
      U64 reserved1 : 26; 
    }; 
    struct
    {
      U32 LowPart;
      U32 HighPart;
    }; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _MMPTE_HARDWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Dirty1 : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Accessed : 1; 
    U64 Dirty : 1; 
    U64 LargePage : 1; 
    U64 Global : 1; 
    U64 CopyOnWrite : 1; 
    U64 Unused : 1; 
    U64 Write : 1; 
    U64 PageFrameNumber : 26; 
    U64 reserved1 : 26; 
  }; 
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; 

typedef struct _MMPTE_PROTOTYPE
{
  struct 
  {
    U64 Valid : 1; 
    U64 DemandFillProto : 1; 
    U64 HiberVerifyConverted : 1; 
    U64 Unused1 : 5; 
    U64 ReadOnly : 1; 
    U64 Combined : 1; 
    U64 Prototype : 1; 
    U64 Protection : 5; 
    U64 Unused : 16; 
    U64 ProtoAddress : 32; 
  }; 
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; 

typedef struct _MMPTE_SOFTWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 PageFileReserved : 1; 
    U64 PageFileAllocated : 1; 
    U64 Unused : 18; 
    U64 PageFileHigh : 32; 
  }; 
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; 

typedef struct _MMPTE_TIMESTAMP
{
  struct 
  {
    U64 MustBeZero : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 Unused : 20; 
    U64 GlobalTimeStamp : 32; 
  }; 
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; 

typedef struct _MMPTE_TRANSITION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Write : 1; 
    U64 Spare : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 PageFrameNumber : 26; 
    U64 Unused : 26; 
  }; 
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; 

typedef struct _MMPTE_SUBSECTION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Unused0 : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Unused1 : 21; 
    U64 SubsectionAddress : 32; 
  }; 
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; 

typedef struct _MMPTE_LIST
{
  struct 
  {
    U64 Valid : 1; 
    U64 OneEntry : 1; 
    U64 filler0 : 8; 
    U64 Prototype : 1; 
    U64 filler1 : 21; 
    U64 NextEntry : 32; 
  }; 
} MMPTE_LIST, *PMMPTE_LIST; 

typedef struct _MMPTE
{
  union
  {
    union
    {
      U64 Long;
      volatile U64 VolatileLong;
      struct _MMPTE_HIGHLOW HighLow;
      struct _HARDWARE_PTE Flush;
      struct _MMPTE_HARDWARE Hard;
      struct _MMPTE_PROTOTYPE Proto;
      struct _MMPTE_SOFTWARE Soft;
      struct _MMPTE_TIMESTAMP TimeStamp;
      struct _MMPTE_TRANSITION Trans;
      struct _MMPTE_SUBSECTION Subsect;
      struct _MMPTE_LIST List;
    }; 
  } u;
} MMPTE, *PMMPTE; 

typedef struct _MIPFNBLINK
{
  union
  {
    struct 
    {
      U32 Blink : 24; 
      U32 TbFlushStamp : 4; 
      U32 Unused : 1; 
      U32 PageBlinkDeleteBit : 1; 
      U32 PageBlinkLockBit : 1; 
    }; 
    struct 
    {
      U32 ShareCount : 30; 
      U32 PageShareCountDeleteBit : 1; 
      U32 PageShareCountLockBit : 1; 
    }; 
    U32 EntireField;
    volatile S32 Lock;
    struct 
    {
      U32 LockNotUsed : 30; 
      U32 DeleteBit : 1; 
      U32 LockBit : 1; 
    }; 
  }; 
} MIPFNBLINK, *PMIPFNBLINK; 

typedef struct _MMPFNENTRY
{
  struct 
  {
    U8 PageLocation : 3; 
    U8 WriteInProgress : 1; 
    U8 Modified : 1; 
    U8 ReadInProgress : 1; 
    U8 CacheAttribute : 2; 
  }; 
  struct 
  {
    U8 Priority : 3; 
    U8 OnProtectedStandby : 1; 
    U8 InPageError : 1; 
    U8 SystemChargedPage : 1; 
    U8 RemovalRequested : 1; 
    U8 ParityError : 1; 
  }; 
} MMPFNENTRY, *PMMPFNENTRY; 

typedef struct _MMPFN
{
  union
  {
    struct _LIST_ENTRY ListEntry;
    struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      union
      {
        union
        {
          U32 Flink;
          U32 WsIndex;
          struct _KEVENT* Event;
          void* Next;
          void* volatile VolatileNext;
          struct _KTHREAD* KernelStackOwner;
          struct _SINGLE_LIST_ENTRY NextStackPfn;
        }; 
      } u1;
      union
      {
        struct _MMPTE* PteAddress;
        void* volatile VolatilePteAddress;
        U32 PteLong;
      }; 
      struct _MMPTE OriginalPte;
      struct _MIPFNBLINK u2;
      union
      {
        union
        {
          struct
          {
            U16 ReferenceCount;
            struct _MMPFNENTRY e1;
          }; 
          struct
          {
            U16 ReferenceCount;
            union
            {
              U16 ShortFlags;
              volatile U16 VolatileShortFlags;
            }; 
          } e2;
        }; 
      } u3;
      union
      {
        union
        {
          struct 
          {
            U32 PteFrame : 24; 
            U32 PageIdentity : 3; 
            U32 PrototypePte : 1; 
            U32 PageColor : 4; 
          }; 
          U32 EntireField;
        }; 
      } u4;
    }; 
  }; 
} MMPFN, *PMMPFN; 

