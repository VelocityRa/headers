typedef struct _RTL_BALANCED_LINKS
{
  struct _RTL_BALANCED_LINKS* Parent;
  struct _RTL_BALANCED_LINKS* LeftChild;
  struct _RTL_BALANCED_LINKS* RightChild;
  char Balance;
  U8 Reserved[3];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; 

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  struct _RTL_BALANCED_LINKS Links;
  U8 Expired;
  char __PADDING__[3];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; 

typedef struct _GUID
{
  U32 Data1;
  U16 Data2;
  U16 Data3;
  U8 Data4[8];
} GUID, *PGUID; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 1; 
              U8 Processor : 5; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2Reserved1;
          U8 Timer2Reserved2;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 Instrumented : 1; 
            U8 ThreadReservedControlFlags : 1; 
          }; 
          U8 DebugActive;
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KMUTANT
{
  struct _DISPATCHER_HEADER Header;
  struct _LIST_ENTRY MutantListEntry;
  struct _KTHREAD* OwnerThread;
  U8 Abandoned;
  U8 ApcDisable;
  char __PADDING__[2];
} KMUTANT, *PKMUTANT; 

typedef enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
} KENLISTMENT_STATE, *PKENLISTMENT_STATE;

typedef struct _KENLISTMENT_HISTORY
{
  U32 Notification;
  enum _KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY; 

typedef struct _KENLISTMENT
{
  U32 cookie;
  struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  struct _GUID EnlistmentId;
  struct _KMUTANT Mutex;
  struct _LIST_ENTRY NextSameTx;
  struct _LIST_ENTRY NextSameRm;
  struct _KRESOURCEMANAGER* ResourceManager;
  struct _KTRANSACTION* Transaction;
  enum _KENLISTMENT_STATE State;
  U32 Flags;
  U32 NotificationMask;
  void* Key;
  U32 KeyRefCount;
  void* RecoveryInformation;
  U32 RecoveryInformationLength;
  void* DynamicNameInformation;
  U32 DynamicNameInformationLength;
  struct _KTMNOTIFICATION_PACKET* FinalNotification;
  struct _KENLISTMENT* SupSubEnlistment;
  void* SupSubEnlHandle;
  void* SubordinateTxHandle;
  struct _GUID CrmEnlistmentEnId;
  struct _GUID CrmEnlistmentTmId;
  struct _GUID CrmEnlistmentRmId;
  U32 NextHistory;
  struct _KENLISTMENT_HISTORY History[20];
} KENLISTMENT, *PKENLISTMENT; 

