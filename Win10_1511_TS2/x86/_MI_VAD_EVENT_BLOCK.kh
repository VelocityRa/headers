typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 1; 
              U8 Processor : 5; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2Reserved1;
          U8 Timer2Reserved2;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 Instrumented : 1; 
            U8 ThreadReservedControlFlags : 1; 
          }; 
          U8 DebugActive;
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KGATE
{
  struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; 

typedef struct _MMSECURE_FLAGS
{
  struct 
  {
    U32 ReadOnly : 1; 
    U32 ReadWrite : 1; 
    U32 SecNoChange : 1; 
    U32 NoDelete : 1; 
    U32 RequiresPteReversal : 1; 
    U32 ExclusiveSecure : 1; 
    U32 Spare : 6; 
  }; 
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; 

typedef struct _MMADDRESS_LIST
{
  union
  {
    union
    {
      struct _MMSECURE_FLAGS Flags;
      U32 FlagsLong;
      void* StartVa;
    }; 
  } u1;
  void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; 

typedef struct _RTL_BITMAP
{
  U32 SizeOfBitMap;
  U32* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; 

typedef struct _MI_SUB64K_FREE_RANGES
{
  struct _RTL_BITMAP BitMap;
  struct _LIST_ENTRY ListEntry;
  struct _MMVAD_SHORT* Vad;
  U16 SubListIndex;
  U16 Hint;
  U32 SetBits;
} MI_SUB64K_FREE_RANGES, *PMI_SUB64K_FREE_RANGES; 

typedef struct _MI_VAD_EVENT_BLOCK
{
  struct _MI_VAD_EVENT_BLOCK* Next;
  U32 WaitReason;
  union
  {
    struct _KGATE Gate;
    struct _MMADDRESS_LIST SecureInfo;
    struct _RTL_BITMAP BitMap;
    struct _MMINPAGE_SUPPORT* InPageSupport;
    struct _MI_LARGEPAGE_MEMORY_INFO* LargePage;
    struct _ETHREAD* CreatingThread;
    struct _MI_SUB64K_FREE_RANGES PebTeb;
  }; 
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; 

