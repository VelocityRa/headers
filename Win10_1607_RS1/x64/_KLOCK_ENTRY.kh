typedef struct _RTL_BALANCED_NODE
{
  union
  {
    struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      struct _RTL_BALANCED_NODE* Left;
      struct _RTL_BALANCED_NODE* Right;
    }; 
  }; 
  union
  {
    U8 Red : 1; 
    U8 Balance : 2; 
    U64 ParentValue;
  }; 
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _KLOCK_ENTRY_LOCK_STATE
{
  union
  {
    struct 
    {
      U64 CrossThreadReleasable : 1; 
      U64 Busy : 1; 
      U64 Reserved : 61; 
      U64 InTree : 1; 
    }; 
    void* LockState;
  }; 
  union
  {
    void* SessionState;
    struct
    {
      U32 SessionId;
      U32 SessionPad;
    }; 
  }; 
} KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE; 

typedef struct _RTL_RB_TREE
{
  struct _RTL_BALANCED_NODE* Root;
  struct _RTL_BALANCED_NODE* Min;
} RTL_RB_TREE, *PRTL_RB_TREE; 

typedef struct _KLOCK_ENTRY
{
  union
  {
    struct _RTL_BALANCED_NODE TreeNode;
    struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; 
  union
  {
    U32 EntryFlags;
    struct
    {
      U8 EntryOffset;
      union
      {
        U8 ThreadLocalFlags;
        struct
        {
          struct 
          {
            U8 WaitingBit : 1; 
            U8 Spare0 : 7; 
          }; 
          union
          {
            U8 AcquiredByte;
            struct
            {
              U8 AcquiredBit : 1; 
              union
              {
                U8 CrossThreadFlags;
                struct 
                {
                  U8 HeadNodeBit : 1; 
                  U8 IoPriorityBit : 1; 
                  U8 IoQoSWaiter : 1; 
                  U8 Spare1 : 5; 
                }; 
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct 
    {
      U32 StaticState : 8; 
      U32 AllFlags : 24; 
    }; 
  }; 
  U32 SpareFlags;
  union
  {
    struct _KLOCK_ENTRY_LOCK_STATE LockState;
    void* volatile LockUnsafe;
    struct
    {
      volatile U8 CrossThreadReleasableAndBusyByte;
      U8 Reserved[6];
      volatile U8 InTreeByte;
      union
      {
        void* SessionState;
        struct
        {
          U32 SessionId;
          U32 SessionPad;
        }; 
      }; 
    }; 
  }; 
  union
  {
    struct
    {
      struct _RTL_RB_TREE OwnerTree;
      struct _RTL_RB_TREE WaiterTree;
    }; 
    char CpuPriorityKey;
  }; 
  U64 EntryLock;
  union
  {
    U32 AllBoosts : 17; 
    struct
    {
      struct 
      {
        U16 CpuBoostsBitmap : 15; 
        U16 IoBoost : 1; 
      }; 
      struct 
      {
        U16 IoQoSBoost : 1; 
        U16 IoNormalPriorityWaiterCount : 8; 
        U16 IoQoSWaiterCount : 7; 
      }; 
    }; 
  }; 
  U32 SparePad;
} KLOCK_ENTRY, *PKLOCK_ENTRY; 

