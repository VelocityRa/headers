typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

typedef struct _MMPFNLIST
{
  U64 Total;
  enum _MMLISTS ListName;
  U64 Flink;
  U64 Blink;
  U64 Lock;
} MMPFNLIST, *PMMPFNLIST; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 6; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2Reserved1;
          U8 Timer2Reserved2;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 ThreadReservedControlFlags : 2; 
          }; 
          union
          {
            U8 DebugActive;
            struct 
            {
              U8 ActiveDR7 : 1; 
              U8 Instrumented : 1; 
              U8 Minimal : 1; 
              U8 Reserved4 : 3; 
              U8 UmsScheduled : 1; 
              U8 UmsPrimary : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _MI_DECAY_TIMER_LINKAGE
{
  struct 
  {
    U64 Spare0 : 1; 
    U64 PreviousDecayPfn : 31; 
    U64 Spare1 : 1; 
    U64 NextDecayPfn : 31; 
  }; 
} MI_DECAY_TIMER_LINKAGE, *PMI_DECAY_TIMER_LINKAGE; 

typedef struct _MI_DECAY_TIMER_LINK
{
  union
  {
    union
    {
      U64 Long;
      struct _MI_DECAY_TIMER_LINKAGE e1;
    }; 
  } u1;
} MI_DECAY_TIMER_LINK, *PMI_DECAY_TIMER_LINK; 

typedef struct _WORK_QUEUE_ITEM
{
  struct _LIST_ENTRY List;
  void* WorkerRoutine;
  void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; 

typedef struct _MI_LDW_WORK_CONTEXT
{
  struct _WORK_QUEUE_ITEM WorkItem;
  struct _FILE_OBJECT* FileObject;
  S32 ErrorStatus;
  volatile S32 Active;
  U8 FreeWhenDone;
  char __PADDING__[7];
} MI_LDW_WORK_CONTEXT, *PMI_LDW_WORK_CONTEXT; 

typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
  struct _KEVENT Event;
  U32 EventSets;
  S32 __PADDING__[1];
} MI_AVAILABLE_PAGE_WAIT_STATES, *PMI_AVAILABLE_PAGE_WAIT_STATES; 

typedef struct _RTL_BITMAP_EX
{
  U64 SizeOfBitMap;
  U64* Buffer;
} RTL_BITMAP_EX, *PRTL_BITMAP_EX; 

typedef struct _MI_PARTITION_PAGE_LISTS
{
  struct _MMPFNLIST* FreePagesByColor[2];
  union _SLIST_HEADER* FreePageSlist[2];
  struct _MMPFNLIST ZeroedPageListHead;
  struct _MMPFNLIST FreePageListHead;
  struct _MMPFNLIST StandbyPageListHead;
  struct _MMPFNLIST StandbyPageListByPriority[8];
  struct _MMPFNLIST ModifiedPageListNoReservation;
  struct _MMPFNLIST ModifiedPageListByReservation[16];
  struct _MMPFNLIST MappedPageListHead[16];
  struct _MMPFNLIST BadPageListHead;
  struct _MMPFNLIST EnclavePageListHead;
  struct _MMPFNLIST* PageLocationList[8];
  volatile U32 StandbyRepurposedByPriority[8];
  struct _KEVENT MappedPageListHeadEvent[16];
  struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
  U32 DecayHand;
  U64 LastDecayHandUpdateTime;
  struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
  U64 AvailableEventsLock;
  struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];
  U64 LowMemoryThreshold;
  U64 HighMemoryThreshold;
  volatile U64 TransitionPrivatePages;
  U32 StandbyListDiscard;
  U8 FreeListDiscard;
  void* MirrorListLocks;
  U8 LargePfnBitMapsReady;
  struct _RTL_BITMAP_EX LargePfnBitMap[2];
  U64 LargePfnBitMapLock;
  S32 __PADDING__[14];
} MI_PARTITION_PAGE_LISTS, *PMI_PARTITION_PAGE_LISTS; 

