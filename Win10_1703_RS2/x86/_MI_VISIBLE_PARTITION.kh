typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _MMSUPPORT_FLAGS
{
  union
  {
    struct
    {
      struct 
      {
        U8 WorkingSetType : 3; 
        U8 Reserved0 : 3; 
        U8 MaximumWorkingSetHard : 1; 
        U8 MinimumWorkingSetHard : 1; 
      }; 
      struct 
      {
        U8 SessionMaster : 1; 
        U8 TrimmerState : 2; 
        U8 Reserved : 1; 
        U8 PageStealers : 4; 
      }; 
    }; 
    U16 u1;
  }; 
  U8 MemoryPriority;
  union
  {
    struct 
    {
      U8 WsleDeleted : 1; 
      U8 SvmEnabled : 1; 
      U8 ForceAge : 1; 
      U8 ForceTrim : 1; 
      U8 UnlockInProgress : 1; 
      U8 NewMaximum : 1; 
      U8 CommitReleaseState : 2; 
    }; 
    U8 u2;
  }; 
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; 

typedef struct _MMSUPPORT_INSTANCE
{
  U16 NextPageColor;
  U16 LastTrimStamp;
  U32 PageFaultCount;
  U32 TrimmedPageCount;
  struct _MMWSL_INSTANCE* VmWorkingSetList;
  struct _LIST_ENTRY WorkingSetExpansionLinks;
  U32 AgeDistribution[8];
  struct _KGATE* ExitOutswapGate;
  U32 MinimumWorkingSetSize;
  U32 WorkingSetLeafSize;
  U32 WorkingSetLeafPrivateSize;
  U32 WorkingSetSize;
  U32 WorkingSetPrivateSize;
  U32 MaximumWorkingSetSize;
  U32 PeakWorkingSetSize;
  U32 HardFaultCount;
  union
  {
    void* InstancedWorkingSet;
  } u1;
  U32 Reserved0;
  struct _MMSUPPORT_FLAGS Flags;
} MMSUPPORT_INSTANCE, *PMMSUPPORT_INSTANCE; 

typedef struct _MMWSL_INSTANCE
{
  struct _MMPTE* NextPteToTrim;
  struct _MMPTE* NextPteToAge;
  struct _MMPTE* NextPteToAccessClear;
  U32 LastAccessClearingRemainder;
  U32 LastAgingRemainder;
  U32 LockedEntries;
} MMWSL_INSTANCE, *PMMWSL_INSTANCE; 

typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

typedef struct _MMPFNLIST
{
  U32 Total;
  enum _MMLISTS ListName;
  U32 Flink;
  U32 Blink;
  U32 Lock;
} MMPFNLIST, *PMMPFNLIST; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _MDL
{
  struct _MDL* Next;
  S16 Size;
  S16 MdlFlags;
  struct _EPROCESS* Process;
  void* MappedSystemVa;
  void* StartVa;
  U32 ByteCount;
  U32 ByteOffset;
} MDL, *PMDL; 

typedef struct _MI_PAGEFILE_TRACES
{
  S32 Status;
  U16 PartitionId;
  U8 Priority;
  U8 IrpPriority;
  U8 ReservationWrite;
  union _LARGE_INTEGER CurrentTime;
  U32 AvailablePages;
  U32 ModifiedPagesTotal;
  U32 ModifiedPagefilePages;
  U32 ModifiedNoWritePages;
  U32 ModifiedPagefileNoReservationPages;
  struct
  {
    struct _MDL Mdl;
    U32 Page[1];
  } MdlHack;
  S32 __PADDING__[1];
} MI_PAGEFILE_TRACES, *PMI_PAGEFILE_TRACES; 

typedef struct _MI_VISIBLE_PARTITION
{
  U32 LowestPhysicalPage;
  U32 HighestPhysicalPage;
  U32 NumberOfPhysicalPages;
  volatile U32 NumberOfPagingFiles;
  U8 SystemCacheInitialized;
  struct _MMPAGING_FILE* PagingFile[16];
  volatile U32 AvailablePages;
  volatile U32 ResidentAvailablePages;
  struct _MMSUPPORT_INSTANCE PartitionWs[1];
  struct _MMWSL_INSTANCE PartitionWorkingSetLists[1];
  volatile U32 TotalCommittedPages;
  struct _MMPFNLIST ModifiedPageListHead;
  struct _MMPFNLIST ModifiedNoWritePageListHead;
  U32 TotalCommitLimit;
  U32 TotalPagesForPagingFile;
  U32 VadPhysicalPages;
  U32 ProcessLockedFilePages;
  volatile U32 SharedCommit;
  U32 ChargeCommitmentFailures[4];
  volatile S32 PageFileTraceIndex;
  struct _MI_PAGEFILE_TRACES PageFileTraces[32];
} MI_VISIBLE_PARTITION, *PMI_VISIBLE_PARTITION; 

