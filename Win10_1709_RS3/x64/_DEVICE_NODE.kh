typedef struct _UNICODE_STRING
{
  U16 Length;
  U16 MaximumLength;
  wchar_t* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 6; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 ThreadReservedControlFlags : 2; 
          }; 
          union
          {
            U8 DebugActive;
            struct 
            {
              U8 ActiveDR7 : 1; 
              U8 Instrumented : 1; 
              U8 Minimal : 1; 
              U8 Reserved4 : 3; 
              U8 UmsScheduled : 1; 
              U8 UmsPrimary : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef union _POWER_STATE
{
  union
  {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
  }; 
} POWER_STATE, *PPOWER_STATE; 

typedef struct _PO_DEVICE_NOTIFY
{
  struct _LIST_ENTRY Link;
  struct _LIST_ENTRY PowerChildren;
  struct _LIST_ENTRY PowerParents;
  struct _DEVICE_OBJECT* TargetDevice;
  U8 OrderLevel;
  struct _DEVICE_OBJECT* DeviceObject;
  wchar_t* DeviceName;
  wchar_t* DriverName;
  U32 ChildCount;
  U32 ActiveChild;
  U32 ParentCount;
  U32 ActiveParent;
} PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY; 

typedef struct _PO_IRP_QUEUE
{
  struct _IRP* CurrentIrp;
  struct _IRP* PendingIrpList;
} PO_IRP_QUEUE, *PPO_IRP_QUEUE; 

typedef struct _PO_IRP_MANAGER
{
  struct _PO_IRP_QUEUE DeviceIrpQueue;
  struct _PO_IRP_QUEUE SystemIrpQueue;
} PO_IRP_MANAGER, *PPO_IRP_MANAGER; 

typedef enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeInitialized = 770,
  DeviceNodeDriversAdded = 771,
  DeviceNodeResourcesAssigned = 772,
  DeviceNodeStartPending = 773,
  DeviceNodeStartCompletion = 774,
  DeviceNodeStartPostWork = 775,
  DeviceNodeStarted = 776,
  DeviceNodeQueryStopped = 777,
  DeviceNodeStopped = 778,
  DeviceNodeRestartCompletion = 779,
  DeviceNodeEnumeratePending = 780,
  DeviceNodeEnumerateCompletion = 781,
  DeviceNodeAwaitingQueuedDeletion = 782,
  DeviceNodeAwaitingQueuedRemoval = 783,
  DeviceNodeQueryRemoved = 784,
  DeviceNodeRemovePendingCloses = 785,
  DeviceNodeRemoved = 786,
  DeviceNodeDeletePendingCloses = 787,
  DeviceNodeDeleted = 788,
  MaxDeviceNodeState = 789,
} PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

enum PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

typedef struct _GUID
{
  U32 Data1;
  U16 Data2;
  U16 Data3;
  U8 Data4[8];
} GUID, *PGUID; 

typedef struct _DEVICE_NODE
{
  struct _DEVICE_NODE* Sibling;
  struct _DEVICE_NODE* Child;
  struct _DEVICE_NODE* Parent;
  struct _DEVICE_NODE* LastChild;
  struct _DEVICE_OBJECT* PhysicalDeviceObject;
  struct _UNICODE_STRING InstancePath;
  struct _UNICODE_STRING ServiceName;
  struct _IRP* PendingIrp;
  struct _POP_FX_DEVICE* FxDevice;
  volatile S32 FxDeviceLock;
  struct _KEVENT FxRemoveEvent;
  volatile S32 FxActivationCount;
  volatile S32 FxSleepCount;
  struct _POP_FX_PLUGIN* Plugin;
  U32 Level;
  union _POWER_STATE CurrentPowerState;
  struct _PO_DEVICE_NOTIFY Notify;
  struct _PO_IRP_MANAGER PoIrpManager;
  struct _UNICODE_STRING UniqueId;
  U32 PowerFlags;
  enum _PNP_DEVNODE_STATE State;
  enum _PNP_DEVNODE_STATE PreviousState;
  enum _PNP_DEVNODE_STATE StateHistory[20];
  U32 StateHistoryEntry;
  S32 CompletionStatus;
  U32 Flags;
  U32 UserFlags;
  U32 Problem;
  S32 ProblemStatus;
  struct _CM_RESOURCE_LIST* ResourceList;
  struct _CM_RESOURCE_LIST* ResourceListTranslated;
  struct _DEVICE_OBJECT* DuplicatePDO;
  struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  enum _INTERFACE_TYPE InterfaceType;
  U32 BusNumber;
  enum _INTERFACE_TYPE ChildInterfaceType;
  U32 ChildBusNumber;
  U16 ChildBusTypeIndex;
  U8 RemovalPolicy;
  U8 HardwareRemovalPolicy;
  struct _LIST_ENTRY TargetDeviceNotify;
  struct _LIST_ENTRY DeviceArbiterList;
  struct _LIST_ENTRY DeviceTranslatorList;
  U16 NoTranslatorMask;
  U16 QueryTranslatorMask;
  U16 NoArbiterMask;
  U16 QueryArbiterMask;
  union
  {
    union
    {
      struct _DEVICE_NODE* LegacyDeviceNode;
      struct _DEVICE_RELATIONS* PendingDeviceRelations;
      void* Information;
    }; 
  } OverUsed1;
  union
  {
    struct _DEVICE_NODE* NextResourceDeviceNode;
  } OverUsed2;
  struct _CM_RESOURCE_LIST* BootResources;
  struct _CM_RESOURCE_LIST* BootResourcesTranslated;
  U32 CapabilityFlags;
  struct
  {
    enum PROFILE_STATUS DockStatus;
    struct _LIST_ENTRY ListEntry;
    wchar_t* SerialNumber;
  } DockInfo;
  U32 DisableableDepends;
  struct _LIST_ENTRY PendedSetInterfaceState;
  struct _LIST_ENTRY LegacyBusListEntry;
  U32 DriverUnloadRetryCount;
  struct _DEVICE_NODE* PreviousParent;
  S32 DeletedChildren;
  U32 NumaNodeIndex;
  struct _GUID ContainerID;
  U8 OverrideFlags;
  U32 DeviceIdsHash;
  U8 RequiresUnloadedDriver;
  struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;
  U32 StateFlags;
  struct _PNP_REBALANCE_TRACE_CONTEXT* RebalanceContext;
  struct _DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;
} DEVICE_NODE, *PDEVICE_NODE; 

