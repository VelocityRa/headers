typedef struct _HEAP_UNPACKED_ENTRY
{
  void* PreviousBlockPrivateData;
  union
  {
    struct
    {
      U16 Size;
      U8 Flags;
      U8 SmallTagIndex;
    }; 
    struct
    {
      U32 SubSegmentCode;
      U16 PreviousSize;
      union
      {
        U8 SegmentOffset;
        struct
        {
          U8 LFHFlags;
          U8 UnusedBytes;
        }; 
      }; 
    }; 
    U64 CompactHeader;
  }; 
} HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY; 

typedef struct _HEAP_EXTENDED_ENTRY
{
  void* Reserved;
  union
  {
    struct
    {
      U16 FunctionIndex;
      U16 ContextValue;
    }; 
    U32 InterceptorValue;
  }; 
  U16 UnusedBytesLength;
  U8 EntryOffset;
  U8 ExtendedBlockSignature;
} HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY; 

typedef struct _HEAP_ENTRY
{
  union
  {
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          U16 Size;
          U8 Flags;
          U8 SmallTagIndex;
        }; 
        struct
        {
          U32 SubSegmentCode;
          U16 PreviousSize;
          union
          {
            U8 SegmentOffset;
            struct
            {
              U8 LFHFlags;
              U8 UnusedBytes;
            }; 
          }; 
        }; 
        U64 CompactHeader;
      }; 
    }; 
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      void* Reserved;
      union
      {
        struct
        {
          U16 FunctionIndex;
          U16 ContextValue;
        }; 
        struct
        {
          U32 InterceptorValue;
          U16 UnusedBytesLength;
          U8 EntryOffset;
          U8 ExtendedBlockSignature;
        }; 
      }; 
    }; 
    struct
    {
      void* ReservedForAlignment;
      union
      {
        struct
        {
          U32 Code1;
          union
          {
            struct
            {
              U16 Code2;
              U8 Code3;
              U8 Code4;
            }; 
            U32 Code234;
          }; 
        }; 
        U64 AgregateCode;
      }; 
    }; 
  }; 
} HEAP_ENTRY, *PHEAP_ENTRY; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _HEAP_FREE_ENTRY
{
  union
  {
    struct _HEAP_ENTRY HeapEntry;
    struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          U16 Size;
          U8 Flags;
          U8 SmallTagIndex;
        }; 
        struct
        {
          U32 SubSegmentCode;
          U16 PreviousSize;
          union
          {
            U8 SegmentOffset;
            struct
            {
              U8 LFHFlags;
              U8 UnusedBytes;
            }; 
          }; 
        }; 
        U64 CompactHeader;
      }; 
    }; 
    struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      void* Reserved;
      union
      {
        struct
        {
          U16 FunctionIndex;
          U16 ContextValue;
        }; 
        struct
        {
          U32 InterceptorValue;
          U16 UnusedBytesLength;
          U8 EntryOffset;
          U8 ExtendedBlockSignature;
        }; 
      }; 
    }; 
    struct
    {
      void* ReservedForAlignment;
      union
      {
        struct
        {
          U32 Code1;
          union
          {
            struct
            {
              U16 Code2;
              U8 Code3;
              U8 Code4;
            }; 
            U32 Code234;
          }; 
        }; 
        U64 AgregateCode;
      }; 
    }; 
  }; 
  struct _LIST_ENTRY FreeList;
} HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY; 

