typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 6; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 ThreadReservedControlFlags : 2; 
          }; 
          union
          {
            U8 DebugActive;
            struct 
            {
              U8 ActiveDR7 : 1; 
              U8 Instrumented : 1; 
              U8 Minimal : 1; 
              U8 Reserved4 : 3; 
              U8 UmsScheduled : 1; 
              U8 UmsPrimary : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
} KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef struct _KMUTANT
{
  struct _DISPATCHER_HEADER Header;
  struct _LIST_ENTRY MutantListEntry;
  struct _KTHREAD* OwnerThread;
  U8 Abandoned;
  U8 ApcDisable;
  char __PADDING__[6];
} KMUTANT, *PKMUTANT; 

typedef struct _RTL_BALANCED_LINKS
{
  struct _RTL_BALANCED_LINKS* Parent;
  struct _RTL_BALANCED_LINKS* LeftChild;
  struct _RTL_BALANCED_LINKS* RightChild;
  char Balance;
  U8 Reserved[3];
  S32 __PADDING__[1];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; 

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  struct _RTL_BALANCED_LINKS Links;
  U8 Expired;
  char __PADDING__[7];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; 

typedef struct _GUID
{
  U32 Data1;
  U16 Data2;
  U16 Data3;
  U8 Data4[8];
} GUID, *PGUID; 

typedef struct _KQUEUE
{
  struct _DISPATCHER_HEADER Header;
  struct _LIST_ENTRY EntryListHead;
  volatile U32 CurrentCount;
  U32 MaximumCount;
  struct _LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE; 

typedef struct _UNICODE_STRING
{
  U16 Length;
  U16 MaximumLength;
  wchar_t* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; 

typedef struct _RTL_AVL_TABLE
{
  struct _RTL_BALANCED_LINKS BalancedRoot;
  void* OrderedPointer;
  U32 WhichOrderedElement;
  U32 NumberGenericTableElements;
  U32 DepthOfTree;
  struct _RTL_BALANCED_LINKS* RestartKey;
  U32 DeleteCount;
  void* CompareRoutine;
  void* AllocateRoutine;
  void* FreeRoutine;
  void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; 

typedef struct _KTMOBJECT_NAMESPACE
{
  struct _RTL_AVL_TABLE Table;
  struct _KMUTANT Mutex;
  U16 LinksOffset;
  U16 GuidOffset;
  U8 Expired;
  char __PADDING__[3];
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE; 

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  struct _LIST_ENTRY NotificationListHead;
  void* Port;
  U64 Key;
  struct _EPROCESS* BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING; 

typedef struct _KRESOURCEMANAGER
{
  struct _KEVENT NotificationAvailable;
  U32 cookie;
  enum _KRESOURCEMANAGER_STATE State;
  U32 Flags;
  struct _KMUTANT Mutex;
  struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  struct _GUID RmId;
  struct _KQUEUE NotificationQueue;
  struct _KMUTANT NotificationMutex;
  struct _LIST_ENTRY EnlistmentHead;
  U32 EnlistmentCount;
  void* NotificationRoutine;
  void* Key;
  struct _LIST_ENTRY ProtocolListHead;
  struct _LIST_ENTRY PendingPropReqListHead;
  struct _LIST_ENTRY CRMListEntry;
  struct _KTM* Tm;
  struct _UNICODE_STRING Description;
  struct _KTMOBJECT_NAMESPACE Enlistments;
  struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER; 

