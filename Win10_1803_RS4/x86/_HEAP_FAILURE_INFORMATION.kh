typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef struct _FAKE_HEAP_ENTRY
{
  U32 Size;
  U32 PreviousSize;
} FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY; 

typedef struct _EXCEPTION_RECORD
{
  S32 ExceptionCode;
  U32 ExceptionFlags;
  struct _EXCEPTION_RECORD* ExceptionRecord;
  void* ExceptionAddress;
  U32 NumberParameters;
  U32 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; 

typedef struct _FLOATING_SAVE_AREA
{
  U32 ControlWord;
  U32 StatusWord;
  U32 TagWord;
  U32 ErrorOffset;
  U32 ErrorSelector;
  U32 DataOffset;
  U32 DataSelector;
  U8 RegisterArea[80];
  U32 Spare0;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA; 

typedef struct _CONTEXT
{
  U32 ContextFlags;
  U32 Dr0;
  U32 Dr1;
  U32 Dr2;
  U32 Dr3;
  U32 Dr6;
  U32 Dr7;
  struct _FLOATING_SAVE_AREA FloatSave;
  U32 SegGs;
  U32 SegFs;
  U32 SegEs;
  U32 SegDs;
  U32 Edi;
  U32 Esi;
  U32 Ebx;
  U32 Edx;
  U32 Ecx;
  U32 Eax;
  U32 Ebp;
  U32 Eip;
  U32 SegCs;
  U32 EFlags;
  U32 Esp;
  U32 SegSs;
  U8 ExtendedRegisters[512];
} CONTEXT, *PCONTEXT; 

typedef struct _HEAP_FAILURE_INFORMATION
{
  U32 Version;
  U32 StructureSize;
  enum _HEAP_FAILURE_TYPE FailureType;
  void* HeapAddress;
  void* Address;
  void* Param1;
  void* Param2;
  void* Param3;
  void* PreviousBlock;
  void* NextBlock;
  struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  void* StackTrace[32];
  U8 HeapMajorVersion;
  U8 HeapMinorVersion;
  struct _EXCEPTION_RECORD ExceptionRecord;
  struct _CONTEXT ContextRecord;
} HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION; 

