typedef struct _MI_SYSTEM_REGION_ANCHOR
{
  struct 
  {
    U32 ReferenceCount : 31; 
    U32 BeingDeleted : 1; 
  }; 
} MI_SYSTEM_REGION_ANCHOR, *PMI_SYSTEM_REGION_ANCHOR; 

typedef struct _MI_SYSTEM_REGION_REFERENCE
{
  struct
  {
    union
    {
      struct _MI_SYSTEM_REGION_ANCHOR Anchor;
      U32 EntireReference;
    }; 
  } u1;
} MI_SYSTEM_REGION_REFERENCE, *PMI_SYSTEM_REGION_REFERENCE; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 1; 
              U8 Processor : 5; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      union
      {
        U8 ThreadSpecControl;
        struct
        {
          struct 
          {
            U8 SpecControlIbrs : 1; 
            U8 SpecControlStibp : 1; 
            U8 SpecControlReserved : 6; 
          }; 
          union
          {
            U8 ThreadControlFlags;
            struct
            {
              struct 
              {
                U8 CycleProfiling : 1; 
                U8 CounterProfiling : 1; 
                U8 GroupScheduling : 1; 
                U8 AffinitySet : 1; 
                U8 Tagged : 1; 
                U8 EnergyProfiling : 1; 
                U8 SchedulerAssist : 1; 
                U8 Instrumented : 1; 
              }; 
              U8 DebugActive;
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _MMWSL_INSTANCE
{
  struct _MMPTE* NextPteToTrim;
  struct _MMPTE* NextPteToAge;
  struct _MMPTE* NextPteToAccessClear;
  U32 LastAccessClearingRemainder;
  U32 LastAgingRemainder;
  U32 LockedEntries;
} MMWSL_INSTANCE, *PMMWSL_INSTANCE; 

typedef struct _MI_SYSTEM_VA_STATE
{
  U32 SystemTablesLock;
  U32 SystemVaBias;
  U32 SystemAvailableVaLow;
  U32 VirtualBias;
  void* SystemRangeStart;
  U8 SystemCachePdeCount[1024];
  void* SystemCacheReverseMaps[1024];
  struct _MI_SYSTEM_REGION_REFERENCE VaRegion[1024];
  U32 TopLevelPteLockBits[128];
  U32 TopLevelPteAlternateLockBits[4];
  volatile S32 DeleteKvaLock;
  struct _MI_WSLE* WsleArrays[8];
  struct _MI_HYPER_SPACE* PagableHyperSpace;
  void* HyperSpaceEnd;
  struct _KEVENT FreeSystemCacheVa;
  U32 SystemVaLock;
  U32 SystemCacheViewLock;
  struct _MMWSL_INSTANCE SystemWorkingSetList[8];
  S32 __PADDING__[6];
} MI_SYSTEM_VA_STATE, *PMI_SYSTEM_VA_STATE; 

