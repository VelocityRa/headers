typedef struct _MI_PARTITION_FLAGS
{
  struct 
  {
    U32 BeingDeleted : 1; 
    U32 PageListsInitialized : 1; 
    U32 StoreReservedPagesCharged : 1; 
    U32 UseSlabAllocators : 1; 
    U32 PureHoldingPartition : 1; 
    U32 ZeroPagesOptional : 1; 
  }; 
} MI_PARTITION_FLAGS, *PMI_PARTITION_FLAGS; 

typedef struct _RTL_AVL_TREE
{
  struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _WORK_QUEUE_ITEM
{
  struct _LIST_ENTRY List;
  void* WorkerRoutine;
  void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 1; 
              U8 Processor : 5; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 SchedulerAssist : 1; 
            U8 Instrumented : 1; 
          }; 
          U8 DebugActive;
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _MI_PARTITION_CORE
{
  U16 PartitionId;
  union
  {
    union
    {
      U32 LongFlags;
      struct _MI_PARTITION_FLAGS Flags;
    }; 
  } u;
  U32 Signature;
  U8 MemoryConfigurationChanged;
  struct _MI_NODE_INFORMATION* NodeInformation;
  struct _RTL_AVL_TREE PageRoot;
  struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;
  U32 MemoryBlockReferences;
  struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;
  U32 PfnUnmapCount;
  void* PfnUnmapWaitList;
  struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;
  struct _KEVENT ExitEvent;
  void* SystemThreadHandles[5];
  struct _EPARTITION* PartitionObject;
  struct _EX_PUSH_LOCK PartitionSystemThreadsLock;
  struct _EX_PUSH_LOCK DynamicMemoryPushLock;
  volatile S32 DynamicMemoryLock;
  U8 PfnUnmapActive;
  struct _KEVENT TemporaryMemoryEvent;
  void* RootDirectory;
  void* KernelObjectsDirectory;
  struct _KEVENT* MemoryEvents[11];
  void* MemoryEventHandles[11];
} MI_PARTITION_CORE, *PMI_PARTITION_CORE; 

