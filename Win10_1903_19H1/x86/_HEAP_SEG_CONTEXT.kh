struct RTL_HP_ENV_HANDLE
{
  void* h[2];
}; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _RTL_RB_TREE
{
  struct _RTL_BALANCED_NODE* Root;
  union
  {
    U8 Encoded : 1; 
    struct _RTL_BALANCED_NODE* Min;
  }; 
} RTL_RB_TREE, *PRTL_RB_TREE; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _HEAP_SEG_CONTEXT
{
  U32 SegmentMask;
  U8 UnitShift;
  U8 PagesPerUnitShift;
  U8 FirstDescriptorIndex;
  U8 CachedCommitSoftShift;
  U8 CachedCommitHighShift;
  union
  {
    union
    {
      struct 
      {
        U8 LargePagePolicy : 3; 
        U8 FullDecommit : 1; 
        U8 ReleaseEmptySegments : 1; 
      }; 
      U8 AllFlags;
    }; 
  } Flags;
  U32 MaxAllocationSize;
  S16 OlpStatsOffset;
  S16 MemStatsOffset;
  void* LfhContext;
  void* VsContext;
  struct RTL_HP_ENV_HANDLE EnvHandle;
  void* Heap;
  U32 SegmentLock;
  struct _LIST_ENTRY SegmentListHead;
  U32 SegmentCount;
  struct _RTL_RB_TREE FreePageRanges;
  U32 FreeSegmentListLock;
  struct _SINGLE_LIST_ENTRY FreeSegmentList[2];
  S32 __PADDING__[7];
} HEAP_SEG_CONTEXT, *PHEAP_SEG_CONTEXT; 

