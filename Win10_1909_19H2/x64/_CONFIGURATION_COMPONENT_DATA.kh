typedef enum _CONFIGURATION_CLASS
{
  SystemClass = 0,
  ProcessorClass = 1,
  CacheClass = 2,
  AdapterClass = 3,
  ControllerClass = 4,
  PeripheralClass = 5,
  MemoryClass = 6,
  MaximumClass = 7,
} CONFIGURATION_CLASS, *PCONFIGURATION_CLASS;

typedef enum _CONFIGURATION_TYPE
{
  ArcSystem = 0,
  CentralProcessor = 1,
  FloatingPointProcessor = 2,
  PrimaryIcache = 3,
  PrimaryDcache = 4,
  SecondaryIcache = 5,
  SecondaryDcache = 6,
  SecondaryCache = 7,
  EisaAdapter = 8,
  TcAdapter = 9,
  ScsiAdapter = 10,
  DtiAdapter = 11,
  MultiFunctionAdapter = 12,
  DiskController = 13,
  TapeController = 14,
  CdromController = 15,
  WormController = 16,
  SerialController = 17,
  NetworkController = 18,
  DisplayController = 19,
  ParallelController = 20,
  PointerController = 21,
  KeyboardController = 22,
  AudioController = 23,
  OtherController = 24,
  DiskPeripheral = 25,
  FloppyDiskPeripheral = 26,
  TapePeripheral = 27,
  ModemPeripheral = 28,
  MonitorPeripheral = 29,
  PrinterPeripheral = 30,
  PointerPeripheral = 31,
  KeyboardPeripheral = 32,
  TerminalPeripheral = 33,
  OtherPeripheral = 34,
  LinePeripheral = 35,
  NetworkPeripheral = 36,
  SystemMemory = 37,
  DockingInformation = 38,
  RealModeIrqRoutingTable = 39,
  RealModePCIEnumeration = 40,
  MaximumType = 41,
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;

typedef struct _DEVICE_FLAGS
{
  struct 
  {
    U32 Failed : 1; 
    U32 ReadOnly : 1; 
    U32 Removable : 1; 
    U32 ConsoleIn : 1; 
    U32 ConsoleOut : 1; 
    U32 Input : 1; 
    U32 Output : 1; 
  }; 
} DEVICE_FLAGS, *PDEVICE_FLAGS; 

typedef struct _CONFIGURATION_COMPONENT
{
  enum _CONFIGURATION_CLASS Class;
  enum _CONFIGURATION_TYPE Type;
  struct _DEVICE_FLAGS Flags;
  U16 Version;
  U16 Revision;
  U32 Key;
  union
  {
    U32 AffinityMask;
    struct
    {
      U16 Group;
      U16 GroupIndex;
    }; 
  }; 
  U32 ConfigurationDataLength;
  U32 IdentifierLength;
  char* Identifier;
} CONFIGURATION_COMPONENT, *PCONFIGURATION_COMPONENT; 

typedef struct _CONFIGURATION_COMPONENT_DATA
{
  struct _CONFIGURATION_COMPONENT_DATA* Parent;
  struct _CONFIGURATION_COMPONENT_DATA* Child;
  struct _CONFIGURATION_COMPONENT_DATA* Sibling;
  struct _CONFIGURATION_COMPONENT ComponentEntry;
  void* ConfigurationData;
} CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA; 

