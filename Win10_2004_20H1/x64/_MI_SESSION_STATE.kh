typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U64 Locked : 1; 
      U64 Waiting : 1; 
      U64 Waking : 1; 
      U64 MultipleShared : 1; 
      U64 Shared : 60; 
    }; 
    U64 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _RTL_AVL_TREE
{
  struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; 

typedef struct _MMSESSION
{
  struct _EX_PUSH_LOCK SystemSpaceViewLock;
  struct _EX_PUSH_LOCK* SystemSpaceViewLockPointer;
  struct _RTL_AVL_TREE ViewRoot;
  U32 ViewCount;
  U32 BitmapFailures;
} MMSESSION, *PMMSESSION; 

typedef struct _MI_HUGE_SYSTEM_VIEW_HEAD
{
  struct _RTL_AVL_TREE ViewRoot;
  U32 ViewCount;
  volatile S32 Lock;
} MI_HUGE_SYSTEM_VIEW_HEAD, *PMI_HUGE_SYSTEM_VIEW_HEAD; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 6; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 SchedulerAssist : 1; 
            U8 ThreadReservedControlFlags : 1; 
          }; 
          union
          {
            U8 DebugActive;
            struct 
            {
              U8 ActiveDR7 : 1; 
              U8 Instrumented : 1; 
              U8 Minimal : 1; 
              U8 Reserved4 : 2; 
              U8 AltSyscall : 1; 
              U8 UmsScheduled : 1; 
              U8 UmsPrimary : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _MI_SESSION_STATE
{
  struct _MMSESSION SystemSession;
  U8 CodePageEdited;
  U64* DynamicVaBitBuffer;
  U64 DynamicVaBitBufferPages;
  void* DynamicVaStart;
  void* ImageVaStart;
  struct _MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];
  U32* DynamicPtesBitBuffer;
  struct _EX_PUSH_LOCK IdLock;
  struct _EPROCESS* LeaderProcess;
  struct _EX_PUSH_LOCK InitializeLock;
  struct _MMWSL_INSTANCE* WorkingSetList;
  void* SessionBase;
  void* SessionCore;
  struct _RTL_AVL_TREE SessionIdNodes;
  struct _KEVENT DeleteInProgressEvent;
  U32 DeleteInProgressCount;
  S32 __PADDING__[1];
} MI_SESSION_STATE, *PMI_SESSION_STATE; 

