typedef struct _GROUP_AFFINITY
{
  U64 Mask;
  U16 Group;
  U16 Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; 

typedef struct _flags
{
  struct 
  {
    U8 Removable : 1; 
    U8 GroupAssigned : 1; 
    U8 GroupCommitted : 1; 
    U8 GroupAssignmentFixed : 1; 
    U8 ProcessorOnly : 1; 
    U8 Fill : 3; 
  }; 
} flags, *Pflags; 

typedef struct _KHETERO_PROCESSOR_SET
{
  U64 IdealMask;
  U64 PreferredMask;
  U64 AvailableMask;
} KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET; 

typedef union _KQOS_GROUPING_SETS
{
  U64 SingleCoreSet;
  U64 SmtSet;
} KQOS_GROUPING_SETS, *PKQOS_GROUPING_SETS; 

typedef struct _KNODE
{
  U64 IdleNonParkedCpuSet;
  U64 IdleSmtSet;
  U64 NonPairedSmtSet;
  U64 IdleCpuSet;
  U64 DeepIdleSet;
  U64 IdleConstrainedSet;
  U64 NonParkedSet;
  U64 SoftParkedSet;
  U64 NonIsrTargetedSet;
  S32 ParkLock;
  U8 ProcessSeed;
  U8 Spare5[3];
  U32 SiblingMask;
  union
  {
    struct _GROUP_AFFINITY Affinity;
    struct
    {
      U8 AffinityFill[10];
      U16 NodeNumber;
      U16 PrimaryNodeNumber;
      U16 Spare0;
    }; 
  }; 
  U64 SharedReadyQueueMask;
  U64 StrideMask;
  U32 ProximityId;
  U32 Lowest;
  U32 Highest;
  U8 MaximumProcessors;
  struct _flags Flags;
  U8 Spare10;
  struct _KHETERO_PROCESSOR_SET HeteroSets[5];
  U64 PpmConfiguredQosSets[5];
  U64 Spare11;
  union _KQOS_GROUPING_SETS QosGroupingSets;
  U64 QosPreemptibleSet;
  U64 LLCLeaders;
} KNODE, *PKNODE; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _WORK_QUEUE_ITEM
{
  struct _LIST_ENTRY List;
  void* WorkerRoutine;
  void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; 

typedef struct _ENODE
{
  struct _KNODE Ncb;
  struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
  S32 __PADDING__[24];
} ENODE, *PENODE; 

