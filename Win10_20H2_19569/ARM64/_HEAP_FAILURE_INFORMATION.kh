typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
  heap_failure_allocation_limit = 20,
  heap_failure_commit_limit = 21,
  heap_failure_invalid_va_mgr_query = 22,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef struct _FAKE_HEAP_ENTRY
{
  U64 Size;
  U64 PreviousSize;
} FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY; 

typedef struct _EXCEPTION_RECORD
{
  S32 ExceptionCode;
  U32 ExceptionFlags;
  struct _EXCEPTION_RECORD* ExceptionRecord;
  void* ExceptionAddress;
  U32 NumberParameters;
  U64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; 

typedef union _ARM64_NT_NEON128
{
  union
  {
    struct
    {
      U64 Low;
      S64 High;
    }; 
    double D[2];
    float S[4];
    U16 H[8];
    U8 B[16];
  }; 
} ARM64_NT_NEON128, *PARM64_NT_NEON128; 

typedef struct _CONTEXT
{
  U32 ContextFlags;
  U32 Cpsr;
  union
  {
    struct
    {
      U64 X0;
      U64 X1;
      U64 X2;
      U64 X3;
      U64 X4;
      U64 X5;
      U64 X6;
      U64 X7;
      U64 X8;
      U64 X9;
      U64 X10;
      U64 X11;
      U64 X12;
      U64 X13;
      U64 X14;
      U64 X15;
      U64 X16;
      U64 X17;
      U64 X18;
      U64 X19;
      U64 X20;
      U64 X21;
      U64 X22;
      U64 X23;
      U64 X24;
      U64 X25;
      U64 X26;
      U64 X27;
      U64 X28;
      U64 Fp;
      U64 Lr;
    }; 
    U64 X[31];
  }; 
  U64 Sp;
  U64 Pc;
  union _ARM64_NT_NEON128 V[32];
  U32 Fpcr;
  U32 Fpsr;
  U32 Bcr[8];
  U64 Bvr[8];
  U32 Wcr[2];
  U64 Wvr[2];
} CONTEXT, *PCONTEXT; 

typedef struct _HEAP_FAILURE_INFORMATION
{
  U32 Version;
  U32 StructureSize;
  enum _HEAP_FAILURE_TYPE FailureType;
  void* HeapAddress;
  void* Address;
  void* Param1;
  void* Param2;
  void* Param3;
  void* PreviousBlock;
  void* NextBlock;
  struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  void* StackTrace[32];
  U8 HeapMajorVersion;
  U8 HeapMinorVersion;
  struct _EXCEPTION_RECORD ExceptionRecord;
  struct _CONTEXT ContextRecord;
} HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION; 

