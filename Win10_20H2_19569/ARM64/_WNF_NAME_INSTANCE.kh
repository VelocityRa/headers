typedef struct _WNF_NODE_HEADER
{
  U16 NodeTypeCode;
  U16 NodeByteSize;
} WNF_NODE_HEADER, *PWNF_NODE_HEADER; 

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    U64 Count;
    void* Ptr;
  }; 
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; 

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      struct _RTL_BALANCED_NODE* Left;
      struct _RTL_BALANCED_NODE* Right;
    }; 
  }; 
  union
  {
    U8 Red : 1; 
    U8 Balance : 2; 
    U64 ParentValue;
  }; 
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; 

typedef struct _WNF_STATE_NAME_STRUCT
{
  struct 
  {
    U64 Version : 4; 
    U64 NameLifetime : 2; 
    U64 DataScope : 4; 
    U64 PermanentData : 1; 
    U64 Sequence : 53; 
  }; 
} WNF_STATE_NAME_STRUCT, *PWNF_STATE_NAME_STRUCT; 

typedef struct _WNF_STATE_NAME_REGISTRATION
{
  U32 MaxStateSize;
  const struct _WNF_TYPE_ID* TypeId;
  struct _SECURITY_DESCRIPTOR* SecurityDescriptor;
} WNF_STATE_NAME_REGISTRATION, *PWNF_STATE_NAME_REGISTRATION; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U64 Locked : 1; 
      U64 Waiting : 1; 
      U64 Waking : 1; 
      U64 MultipleShared : 1; 
      U64 Shared : 60; 
    }; 
    U64 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _WNF_LOCK
{
  struct _EX_PUSH_LOCK PushLock;
} WNF_LOCK, *PWNF_LOCK; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _WNF_NAME_INSTANCE
{
  struct _WNF_NODE_HEADER Header;
  struct _EX_RUNDOWN_REF RunRef;
  struct _RTL_BALANCED_NODE TreeLinks;
  struct _WNF_STATE_NAME_STRUCT StateName;
  struct _WNF_SCOPE_INSTANCE* ScopeInstance;
  struct _WNF_STATE_NAME_REGISTRATION StateNameInfo;
  struct _WNF_LOCK StateDataLock;
  struct _WNF_STATE_DATA* StateData;
  U32 CurrentChangeStamp;
  void* PermanentDataStore;
  struct _WNF_LOCK StateSubscriptionListLock;
  struct _LIST_ENTRY StateSubscriptionListHead;
  struct _LIST_ENTRY TemporaryNameListEntry;
  struct _EPROCESS* CreatorProcess;
  S32 DataSubscribersCount;
  S32 CurrentDeliveryCount;
} WNF_NAME_INSTANCE, *PWNF_NAME_INSTANCE; 

