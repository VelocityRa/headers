typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
  heap_failure_allocation_limit = 20,
  heap_failure_commit_limit = 21,
  heap_failure_invalid_va_mgr_query = 22,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef struct _FAKE_HEAP_ENTRY
{
  U64 Size;
  U64 PreviousSize;
} FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY; 

typedef struct _EXCEPTION_RECORD
{
  S32 ExceptionCode;
  U32 ExceptionFlags;
  struct _EXCEPTION_RECORD* ExceptionRecord;
  void* ExceptionAddress;
  U32 NumberParameters;
  U64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; 

typedef struct _M128A
{
  U64 Low;
  S64 High;
} M128A, *PM128A; 

typedef struct _XSAVE_FORMAT
{
  U16 ControlWord;
  U16 StatusWord;
  U8 TagWord;
  U8 Reserved1;
  U16 ErrorOpcode;
  U32 ErrorOffset;
  U16 ErrorSelector;
  U16 Reserved2;
  U32 DataOffset;
  U16 DataSelector;
  U16 Reserved3;
  U32 MxCsr;
  U32 MxCsr_Mask;
  struct _M128A FloatRegisters[8];
  struct _M128A XmmRegisters[16];
  U8 Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT; 

typedef struct _CONTEXT
{
  U64 P1Home;
  U64 P2Home;
  U64 P3Home;
  U64 P4Home;
  U64 P5Home;
  U64 P6Home;
  U32 ContextFlags;
  U32 MxCsr;
  U16 SegCs;
  U16 SegDs;
  U16 SegEs;
  U16 SegFs;
  U16 SegGs;
  U16 SegSs;
  U32 EFlags;
  U64 Dr0;
  U64 Dr1;
  U64 Dr2;
  U64 Dr3;
  U64 Dr6;
  U64 Dr7;
  U64 Rax;
  U64 Rcx;
  U64 Rdx;
  U64 Rbx;
  U64 Rsp;
  U64 Rbp;
  U64 Rsi;
  U64 Rdi;
  U64 R8;
  U64 R9;
  U64 R10;
  U64 R11;
  U64 R12;
  U64 R13;
  U64 R14;
  U64 R15;
  U64 Rip;
  union
  {
    struct _XSAVE_FORMAT FltSave;
    struct
    {
      struct _M128A Header[2];
      struct _M128A Legacy[8];
      struct _M128A Xmm0;
      struct _M128A Xmm1;
      struct _M128A Xmm2;
      struct _M128A Xmm3;
      struct _M128A Xmm4;
      struct _M128A Xmm5;
      struct _M128A Xmm6;
      struct _M128A Xmm7;
      struct _M128A Xmm8;
      struct _M128A Xmm9;
      struct _M128A Xmm10;
      struct _M128A Xmm11;
      struct _M128A Xmm12;
      struct _M128A Xmm13;
      struct _M128A Xmm14;
      struct _M128A Xmm15;
    }; 
  }; 
  struct _M128A VectorRegister[26];
  U64 VectorControl;
  U64 DebugControl;
  U64 LastBranchToRip;
  U64 LastBranchFromRip;
  U64 LastExceptionToRip;
  U64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT; 

typedef struct _HEAP_FAILURE_INFORMATION
{
  U32 Version;
  U32 StructureSize;
  enum _HEAP_FAILURE_TYPE FailureType;
  void* HeapAddress;
  void* Address;
  void* Param1;
  void* Param2;
  void* Param3;
  void* PreviousBlock;
  void* NextBlock;
  struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  void* StackTrace[32];
  U8 HeapMajorVersion;
  U8 HeapMinorVersion;
  struct _EXCEPTION_RECORD ExceptionRecord;
  struct _CONTEXT ContextRecord;
} HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION; 

