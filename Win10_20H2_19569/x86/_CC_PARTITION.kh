typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  struct _LIST_ENTRY SharedCacheMapLinks;
  U32 Flags;
} SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    volatile S32 Lock;
    S32 LockNV;
    struct
    {
      U8 Type;
      U8 Signalling;
      U8 Size;
      U8 Reserved1;
    }; 
    struct
    {
      U8 TimerType;
      union
      {
        U8 TimerControlFlags;
        struct
        {
          struct 
          {
            U8 Absolute : 1; 
            U8 Wake : 1; 
            U8 EncodedTolerableDelay : 6; 
          }; 
          U8 Hand;
          union
          {
            U8 TimerMiscFlags;
            struct 
            {
              U8 Index : 1; 
              U8 Processor : 5; 
              U8 Inserted : 1; 
              volatile U8 Expired : 1; 
            }; 
          }; 
        }; 
      }; 
    }; 
    struct
    {
      U8 Timer2Type;
      union
      {
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Timer2ReservedFlags : 2; 
          }; 
          U8 Timer2ComponentId;
          U8 Timer2RelativeId;
        }; 
      }; 
    }; 
    struct
    {
      U8 QueueType;
      union
      {
        U8 QueueControlFlags;
        struct
        {
          struct 
          {
            U8 Abandoned : 1; 
            U8 DisableIncrement : 1; 
            U8 QueueReservedControlFlags : 6; 
          }; 
          U8 QueueSize;
          U8 QueueReserved;
        }; 
      }; 
    }; 
    struct
    {
      U8 ThreadType;
      U8 ThreadReserved;
      union
      {
        U8 ThreadControlFlags;
        struct
        {
          struct 
          {
            U8 CycleProfiling : 1; 
            U8 CounterProfiling : 1; 
            U8 GroupScheduling : 1; 
            U8 AffinitySet : 1; 
            U8 Tagged : 1; 
            U8 EnergyProfiling : 1; 
            U8 SchedulerAssist : 1; 
            U8 Instrumented : 1; 
          }; 
          U8 DebugActive;
        }; 
      }; 
    }; 
    struct
    {
      U8 MutantType;
      U8 MutantSize;
      U8 DpcActive;
      U8 MutantReserved;
    }; 
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _KDPC
{
  union
  {
    U32 TargetInfoAsUlong;
    struct
    {
      U8 Type;
      U8 Importance;
      volatile U16 Number;
    }; 
  }; 
  struct _SINGLE_LIST_ENTRY DpcListEntry;
  U32 ProcessorHistory;
  void* DeferredRoutine;
  void* DeferredContext;
  void* SystemArgument1;
  void* SystemArgument2;
  void* DpcData;
} KDPC, *PKDPC; 

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      U32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      U32 HighPart;
    } u;
    U64 QuadPart;
  }; 
} ULARGE_INTEGER, *PULARGE_INTEGER; 

typedef struct _KTIMER
{
  struct _DISPATCHER_HEADER Header;
  union _ULARGE_INTEGER DueTime;
  struct _LIST_ENTRY TimerListEntry;
  struct _KDPC* Dpc;
  U32 Period;
} KTIMER, *PKTIMER; 

typedef struct _LAZY_WRITER
{
  struct _KDPC ScanDpc;
  struct _KTIMER ScanTimer;
  U8 ScanActive;
  U8 OtherWork;
  U8 PendingTeardownScan;
  U8 PendingPeriodicScan;
  U8 PendingLowMemoryScan;
  U8 PendingPowerScan;
  U8 PendingCoalescingFlushScan;
  char __PADDING__[1];
} LAZY_WRITER, *PLAZY_WRITER; 

typedef struct _DIRTY_PAGE_STATISTICS
{
  U32 DirtyPages;
  U32 DirtyPagesLastScan;
  U32 DirtyPagesScheduledLastScan;
} DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS; 

typedef struct _DIRTY_PAGE_THRESHOLDS
{
  U32 DirtyPageThreshold;
  U32 DirtyPageThresholdTop;
  U32 DirtyPageThresholdBottom;
  U32 DirtyPageTarget;
  U64 AggregateAvailablePages;
  U64 AggregateDirtyPages;
  U32 AvailableHistory;
  S32 __PADDING__[1];
} DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef struct _CC_PARTITION
{
  S16 NodeTypeCode;
  S16 NodeByteSize;
  struct _EPARTITION* PartitionObject;
  struct _LIST_ENTRY CleanSharedCacheMapList;
  struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
  struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
  struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
  struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
  U32 PrivateLock;
  U32 ConsecutiveWorklessLazyScanCount;
  U8 ForcedDisableLazywriteScan;
  U32 WorkQueueLock;
  U32 NumberWorkerThreads;
  U32 NumberActiveWorkerThreads;
  struct _LIST_ENTRY IdleWorkerThreadList;
  struct _LIST_ENTRY FastTeardownWorkQueue;
  struct _LIST_ENTRY ExpressWorkQueue;
  struct _LIST_ENTRY RegularWorkQueue;
  struct _LIST_ENTRY PostTickWorkQueue;
  struct _LIST_ENTRY CleanCachemapUninitWorkQueue;
  struct _LIST_ENTRY IdleExtraWriteBehindThreadList;
  U32 ActiveExtraWriteBehindThreads;
  U32 MaxExtraWriteBehindThreads;
  struct _LIST_ENTRY IdleCacheMapUninitThreadList;
  U32 ActiveCacheMapUninitThreads;
  U32 MaxCacheMapUninitThreads;
  U8 QueueThrottle;
  U32 PostTickWorkItemCount;
  U32 ThreadsActiveBeforeThrottle;
  U32 ExtraWBThreadsActiveBeforeThrottle;
  U32 ExecutingWriteBehindWorkItems;
  U32 ExecutingHighPriorityWorkItem;
  struct _KEVENT LowMemoryEvent;
  struct _KEVENT PowerEvent;
  struct _KEVENT PeriodicEvent;
  struct _KEVENT WaitingForTeardownEvent;
  struct _KEVENT CoalescingFlushEvent;
  U32 PagesYetToWrite;
  struct _LAZY_WRITER LazyWriter;
  struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;
  S32 ThroughputTrend;
  U64 AverageAvailablePages;
  U64 AverageDirtyPages;
  U64 PagesSkippedDueToHotSpot;
  union _LARGE_INTEGER PrevRegularQueueItemRunTime;
  union _LARGE_INTEGER PrevExtraWBThreadCheckTime;
  U8 AddExtraWriteBehindThreads;
  U8 RemoveExtraThreadPending;
  struct _LIST_ENTRY DeferredWrites;
  U32 DeferredWriteSpinLock;
  struct _LIST_ENTRY* IdleAsyncReadWorkerThreadList;
  U32* NumberActiveAsyncReadWorkerThreads;
  U32* NumberActiveCompleteAsyncReadWorkItems;
  struct _LIST_ENTRY* AsyncReadWorkQueue;
  struct _LIST_ENTRY* AsyncReadCompletionWorkQueue;
  struct _KEVENT* NewAsyncReadRequestEvent;
  struct _ASYNC_READ_THREAD_STATS* ReaderThreadsStats;
  struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;
  struct _LIST_ENTRY VacbFreeHighPriorityList;
  U32 NumberOfFreeHighPriorityVacbs;
  struct _ETHREAD* LowPriWorkerThread;
  struct _SHARED_CACHE_MAP* LowPriSharedCacheMap;
  S32 LowPriOldCpuPriority;
  enum _IO_PRIORITY_HINT LowPriOldIoPriority;
  struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;
  U32 MaxNumberOfWriteBehindThreads;
  U8 CoalescingState;
  U8 ActivePartition;
  U8 RundownPhase;
  S32 RefCount;
  struct _KEVENT ExitEvent;
  struct _KEVENT FinalDereferenceEvent;
  void* LazyWriteScanThreadHandle;
  S32 __PADDING__[3];
} CC_PARTITION, *PCC_PARTITION; 

