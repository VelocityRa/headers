typedef struct _MI_FREE_LARGE_PAGES
{
  U32 LargePageFreeCount[2];
  U32 LargePageFreeCountHiLow[2][2];
  U32 LargePagesCount[4][1][2][2];
  struct _MI_FREE_LARGE_PAGE_LIST* LargePageEntries[4][1][2][2];
} MI_FREE_LARGE_PAGES, *PMI_FREE_LARGE_PAGES; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _WORK_QUEUE_ITEM
{
  struct _LIST_ENTRY List;
  void* WorkerRoutine;
  void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; 

typedef struct _MI_REBUILD_LARGE_PAGE_TIMER
{
  struct _WORK_QUEUE_ITEM WorkItem;
  U8 SecondsLeft;
  U8 RebuildActive;
  U8 NextPassDelta;
  U8 LargeSubPagesActive;
} MI_REBUILD_LARGE_PAGE_TIMER, *PMI_REBUILD_LARGE_PAGE_TIMER; 

typedef struct _RTL_BITMAP
{
  U32 SizeOfBitMap;
  U32* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _MI_PAGE_COLORS
{
  U32 PageSize[3];
} MI_PAGE_COLORS, *PMI_PAGE_COLORS; 

typedef struct _MI_NODE_INFORMATION
{
  struct _MI_FREE_LARGE_PAGES FreeLargePages[2];
  struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;
  struct _RTL_BITMAP FreePageListHeadsBitmap[2];
  U32 FreePageListHeadsBitmapBuffer[16];
  volatile U32 FreeCount[2];
  U32 TotalPages[1];
  U32 TotalPagesEntireNode;
  U32 MmShiftedColor;
  U32 Color;
  volatile U32 ChannelFreeCount[2][1];
  struct
  {
    struct 
    {
      U32 ChannelsHotCold : 1; 
      U32 Spare : 31; 
    }; 
  } Flags;
  U32 LargeListMoveInProgress;
  struct _MI_LARGE_PAGE_LISTS_CHANGING* LargeListWaiters;
  struct _EX_PUSH_LOCK NodeLock;
  U8 ChannelStatus;
  U8 ChannelOrdering[1];
  U8 LockedChannelOrdering[1];
  U8 PowerAttribute[1];
  U32 LargePageLock;
  struct _MI_PAGE_COLORS PageColorTable;
  U32 NumberOfPagesGoingBad;
  void* BootZeroContext;
  void* ZeroingVaBase;
  U32 TotalBytesToZero;
  U32 PerProcessorNumberOfBytesToZero;
  void* ZeroingContext;
  volatile U32 ZeroingProcessorCount;
  volatile S32 ZeroHand;
  volatile S32 FinishedProcessors;
  U8 BackgroundZeroingActive;
  U8 ZeroThreadsReady;
  struct _PHYSICAL_MEMORY_DESCRIPTOR* ZeroingPhysicalMemoryBlock;
} MI_NODE_INFORMATION, *PMI_NODE_INFORMATION; 

