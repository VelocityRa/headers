typedef struct _HEAP_ENTRY
{
  union
  {
    struct
    {
      void* PreviousBlockPrivateData;
      union
      {
        struct
        {
          U16 Size;
          U8 Flags;
          U8 SmallTagIndex;
          U16 PreviousSize;
          union
          {
            U8 SegmentOffset;
            struct
            {
              U8 LFHFlags;
              U8 UnusedBytes;
            }; 
          }; 
        }; 
        U64 CompactHeader;
      }; 
    }; 
    struct
    {
      void* Reserved;
      union
      {
        struct
        {
          U16 FunctionIndex;
          U16 ContextValue;
        }; 
        struct
        {
          U32 InterceptorValue;
          U16 UnusedBytesLength;
          U8 EntryOffset;
          U8 ExtendedBlockSignature;
        }; 
      }; 
    }; 
    struct
    {
      void* ReservedForAlignment;
      union
      {
        struct
        {
          U32 Code1;
          U16 Code2;
          U8 Code3;
          U8 Code4;
        }; 
        U64 AgregateCode;
      }; 
    }; 
  }; 
} HEAP_ENTRY, *PHEAP_ENTRY; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _HEAP_COUNTERS
{
  U64 TotalMemoryReserved;
  U64 TotalMemoryCommitted;
  U64 TotalMemoryLargeUCR;
  U64 TotalSizeInVirtualBlocks;
  U32 TotalSegments;
  U32 TotalUCRs;
  U32 CommittOps;
  U32 DeCommitOps;
  U32 LockAcquires;
  U32 LockCollisions;
  U32 CommitRate;
  U32 DecommittRate;
  U32 CommitFailures;
  U32 InBlockCommitFailures;
  U32 CompactHeapCalls;
  U32 CompactedUCRs;
  U32 AllocAndFreeOps;
  U32 InBlockDeccommits;
  U64 InBlockDeccomitSize;
  U64 HighWatermarkSize;
  U64 LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; 

typedef struct _HEAP_TUNING_PARAMETERS
{
  U32 CommittThresholdShift;
  U64 MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; 

typedef struct _HEAP
{
  struct _HEAP_ENTRY Entry;
  U32 SegmentSignature;
  U32 SegmentFlags;
  struct _LIST_ENTRY SegmentListEntry;
  struct _HEAP* Heap;
  void* BaseAddress;
  U32 NumberOfPages;
  struct _HEAP_ENTRY* FirstEntry;
  struct _HEAP_ENTRY* LastValidEntry;
  U32 NumberOfUnCommittedPages;
  U32 NumberOfUnCommittedRanges;
  U16 SegmentAllocatorBackTraceIndex;
  U16 Reserved;
  struct _LIST_ENTRY UCRSegmentList;
  U32 Flags;
  U32 ForceFlags;
  U32 CompatibilityFlags;
  U32 EncodeFlagMask;
  struct _HEAP_ENTRY Encoding;
  U64 PointerKey;
  U32 Interceptor;
  U32 VirtualMemoryThreshold;
  U32 Signature;
  U64 SegmentReserve;
  U64 SegmentCommit;
  U64 DeCommitFreeBlockThreshold;
  U64 DeCommitTotalFreeThreshold;
  U64 TotalFreeSize;
  U64 MaximumAllocationSize;
  U16 ProcessHeapsListIndex;
  U16 HeaderValidateLength;
  void* HeaderValidateCopy;
  U16 NextAvailableTagIndex;
  U16 MaximumTagIndex;
  struct _HEAP_TAG_ENTRY* TagEntries;
  struct _LIST_ENTRY UCRList;
  U64 AlignRound;
  U64 AlignMask;
  struct _LIST_ENTRY VirtualAllocdBlocks;
  struct _LIST_ENTRY SegmentList;
  U16 AllocatorBackTraceIndex;
  U32 NonDedicatedListLength;
  void* BlocksIndex;
  void* UCRIndex;
  struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  struct _LIST_ENTRY FreeLists;
  struct _HEAP_LOCK* LockVariable;
  void* CommitRoutine;
  void* FrontEndHeap;
  U16 FrontHeapLockCount;
  U8 FrontEndHeapType;
  struct _HEAP_COUNTERS Counters;
  struct _HEAP_TUNING_PARAMETERS TuningParameters;
} HEAP, *PHEAP; 

