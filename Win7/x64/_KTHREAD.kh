typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 TimerControlFlags;
        struct 
        {
          U8 Absolute : 1; 
          U8 Coalescable : 1; 
          U8 KeepShifting : 1; 
          U8 EncodedTolerableDelay : 5; 
        }; 
        U8 Abandoned;
        struct
        {
          U8 Signalling;
          union
          {
            U8 ThreadControlFlags;
            struct 
            {
              U8 CpuThrottled : 1; 
              U8 CycleProfiling : 1; 
              U8 CounterProfiling : 1; 
              U8 Reserved : 5; 
            }; 
            U8 Hand;
            struct
            {
              U8 Size;
              union
              {
                U8 TimerMiscFlags;
                struct 
                {
                  U8 Index : 6; 
                  U8 Inserted : 1; 
                  volatile U8 Expired : 1; 
                }; 
                U8 DebugActive;
                struct 
                {
                  U8 ActiveDR7 : 1; 
                  U8 Instrumented : 1; 
                  U8 Reserved2 : 4; 
                  U8 UmsScheduled : 1; 
                  U8 UmsPrimary : 1; 
                }; 
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef union _KWAIT_STATUS_REGISTER
{
  union
  {
    U8 Flags;
    struct 
    {
      U8 State : 2; 
      U8 Affinity : 1; 
      U8 Priority : 1; 
      U8 Apc : 1; 
      U8 UserApc : 1; 
      U8 Alert : 1; 
      U8 Unused : 1; 
    }; 
  }; 
} KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER; 

typedef struct _KAPC_STATE
{
  struct _LIST_ENTRY ApcListHead[2];
  struct _KPROCESS* Process;
  U8 KernelApcInProgress;
  U8 KernelApcPending;
  U8 UserApcPending;
  char __PADDING__[5];
} KAPC_STATE, *PKAPC_STATE; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      U32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      U32 HighPart;
    } u;
    U64 QuadPart;
  }; 
} ULARGE_INTEGER, *PULARGE_INTEGER; 

typedef struct _KTIMER
{
  struct _DISPATCHER_HEADER Header;
  union _ULARGE_INTEGER DueTime;
  struct _LIST_ENTRY TimerListEntry;
  struct _KDPC* Dpc;
  U32 Processor;
  U32 Period;
} KTIMER, *PKTIMER; 

typedef struct _KWAIT_BLOCK
{
  struct _LIST_ENTRY WaitListEntry;
  struct _KTHREAD* Thread;
  void* Object;
  struct _KWAIT_BLOCK* NextWaitBlock;
  U16 WaitKey;
  U8 WaitType;
  volatile U8 BlockState;
  S32 SpareLong;
} KWAIT_BLOCK, *PKWAIT_BLOCK; 

typedef struct _GROUP_AFFINITY
{
  U64 Mask;
  U16 Group;
  U16 Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; 

typedef struct _KAPC
{
  U8 Type;
  U8 SpareByte0;
  U8 Size;
  U8 SpareByte1;
  U32 SpareLong0;
  struct _KTHREAD* Thread;
  struct _LIST_ENTRY ApcListEntry;
  void* KernelRoutine;
  void* RundownRoutine;
  void* NormalRoutine;
  void* NormalContext;
  void* SystemArgument1;
  void* SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  U8 Inserted;
  char __PADDING__[5];
} KAPC, *PKAPC; 

typedef struct _KSEMAPHORE
{
  struct _DISPATCHER_HEADER Header;
  S32 Limit;
  S32 __PADDING__[1];
} KSEMAPHORE, *PKSEMAPHORE; 

typedef struct _KTHREAD
{
  struct _DISPATCHER_HEADER Header;
  volatile U64 CycleTime;
  U64 QuantumTarget;
  void* InitialStack;
  void* volatile StackLimit;
  void* KernelStack;
  U64 ThreadLock;
  union _KWAIT_STATUS_REGISTER WaitRegister;
  volatile U8 Running;
  U8 Alerted[2];
  union
  {
    struct 
    {
      U32 KernelStackResident : 1; 
      U32 ReadyTransition : 1; 
      U32 ProcessReadyQueue : 1; 
      U32 WaitNext : 1; 
      U32 SystemAffinityActive : 1; 
      U32 Alertable : 1; 
      U32 GdiFlushActive : 1; 
      U32 UserStackWalkActive : 1; 
      U32 ApcInterruptRequest : 1; 
      U32 ForceDeferSchedule : 1; 
      U32 QuantumEndMigrate : 1; 
      U32 UmsDirectedSwitchEnable : 1; 
      U32 TimerActive : 1; 
      U32 Reserved : 19; 
    }; 
    S32 MiscFlags;
  }; 
  union
  {
    struct _KAPC_STATE ApcState;
    struct
    {
      U8 ApcStateFill[43];
      char Priority;
      volatile U32 NextProcessor;
    }; 
  }; 
  volatile U32 DeferredProcessor;
  U64 ApcQueueLock;
  volatile S64 WaitStatus;
  struct _KWAIT_BLOCK* WaitBlockList;
  union
  {
    struct _LIST_ENTRY WaitListEntry;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; 
  struct _KQUEUE* volatile Queue;
  void* Teb;
  struct _KTIMER Timer;
  union
  {
    struct 
    {
      volatile U32 AutoAlignment : 1; 
      volatile U32 DisableBoost : 1; 
      volatile U32 EtwStackTraceApc1Inserted : 1; 
      volatile U32 EtwStackTraceApc2Inserted : 1; 
      volatile U32 CalloutActive : 1; 
      volatile U32 ApcQueueable : 1; 
      volatile U32 EnableStackSwap : 1; 
      volatile U32 GuiThread : 1; 
      volatile U32 UmsPerformingSyscall : 1; 
      volatile U32 ReservedFlags : 23; 
    }; 
    volatile S32 ThreadFlags;
  }; 
  U32 Spare0;
  union
  {
    struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      U8 WaitBlockFill4[44];
      U32 ContextSwitches;
    }; 
    struct
    {
      U8 WaitBlockFill5[92];
      volatile U8 State;
      char NpxState;
      U8 WaitIrql;
      char WaitMode;
    }; 
    struct
    {
      U8 WaitBlockFill6[140];
      U32 WaitTime;
    }; 
    struct
    {
      U8 WaitBlockFill7[168];
      void* TebMappedLowVa;
      struct _UMS_CONTROL_BLOCK* Ucb;
    }; 
    struct
    {
      U8 WaitBlockFill8[188];
      union
      {
        struct
        {
          S16 KernelApcDisable;
          S16 SpecialApcDisable;
        }; 
        U32 CombinedApcDisable;
      }; 
    }; 
  }; 
  struct _LIST_ENTRY QueueListEntry;
  struct _KTRAP_FRAME* TrapFrame;
  void* FirstArgument;
  union
  {
    void* CallbackStack;
    U64 CallbackDepth;
  }; 
  U8 ApcStateIndex;
  char BasePriority;
  union
  {
    char PriorityDecrement;
    struct 
    {
      U8 ForegroundBoost : 4; 
      U8 UnusualBoost : 4; 
    }; 
  }; 
  U8 Preempted;
  U8 AdjustReason;
  char AdjustIncrement;
  char PreviousMode;
  char Saturation;
  U32 SystemCallNumber;
  U32 FreezeCount;
  volatile struct _GROUP_AFFINITY UserAffinity;
  struct _KPROCESS* Process;
  volatile struct _GROUP_AFFINITY Affinity;
  U32 IdealProcessor;
  U32 UserIdealProcessor;
  struct _KAPC_STATE* ApcStatePointer[2];
  union
  {
    struct _KAPC_STATE SavedApcState;
    struct
    {
      U8 SavedApcStateFill[43];
      U8 WaitReason;
      char SuspendCount;
      char Spare1;
      U8 CodePatchInProgress;
    }; 
  }; 
  void* volatile Win32Thread;
  void* StackBase;
  union
  {
    struct _KAPC SuspendApc;
    struct
    {
      U8 SuspendApcFill0[1];
      U8 ResourceIndex;
    }; 
    struct
    {
      U8 SuspendApcFill1[3];
      U8 QuantumReset;
    }; 
    struct
    {
      U8 SuspendApcFill2[4];
      U32 KernelTime;
    }; 
    struct
    {
      U8 SuspendApcFill3[64];
      struct _KPRCB* volatile WaitPrcb;
    }; 
    struct
    {
      U8 SuspendApcFill4[72];
      void* LegoData;
    }; 
    struct
    {
      U8 SuspendApcFill5[83];
      U8 LargeStack;
      U32 UserTime;
    }; 
  }; 
  union
  {
    struct _KSEMAPHORE SuspendSemaphore;
    struct
    {
      U8 SuspendSemaphorefill[28];
      U32 SListFaultCount;
    }; 
  }; 
  struct _LIST_ENTRY ThreadListEntry;
  struct _LIST_ENTRY MutantListHead;
  void* SListFaultAddress;
  S64 ReadOperationCount;
  S64 WriteOperationCount;
  S64 OtherOperationCount;
  S64 ReadTransferCount;
  S64 WriteTransferCount;
  S64 OtherTransferCount;
  struct _KTHREAD_COUNTERS* ThreadCounters;
  struct _XSTATE_SAVE* XStateSave;
} KTHREAD, *PKTHREAD; 

