typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _MMPFNENTRY
{
  struct 
  {
    U8 PageLocation : 3; 
    U8 WriteInProgress : 1; 
    U8 Modified : 1; 
    U8 ReadInProgress : 1; 
    U8 CacheAttribute : 2; 
  }; 
  struct 
  {
    U8 Priority : 3; 
    U8 Rom : 1; 
    U8 InPageError : 1; 
    U8 KernelStack : 1; 
    U8 RemovalRequested : 1; 
    U8 ParityError : 1; 
  }; 
} MMPFNENTRY, *PMMPFNENTRY; 

typedef struct _MMPTE_HARDWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Dirty1 : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Accessed : 1; 
    U64 Dirty : 1; 
    U64 LargePage : 1; 
    U64 Global : 1; 
    U64 CopyOnWrite : 1; 
    U64 Unused : 1; 
    U64 Write : 1; 
    U64 PageFrameNumber : 36; 
    U64 reserved1 : 4; 
    U64 SoftwareWsIndex : 11; 
    U64 NoExecute : 1; 
  }; 
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; 

typedef struct _HARDWARE_PTE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Write : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Accessed : 1; 
    U64 Dirty : 1; 
    U64 LargePage : 1; 
    U64 Global : 1; 
    U64 CopyOnWrite : 1; 
    U64 Prototype : 1; 
    U64 reserved0 : 1; 
    U64 PageFrameNumber : 28; 
    U64 reserved1 : 12; 
    U64 SoftwareWsIndex : 11; 
    U64 NoExecute : 1; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _MMPTE_PROTOTYPE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Unused0 : 7; 
    U64 ReadOnly : 1; 
    U64 Unused1 : 1; 
    U64 Prototype : 1; 
    U64 Protection : 5; 
    S64 ProtoAddress : 48; 
  }; 
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; 

typedef struct _MMPTE_SOFTWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 UsedPageTableEntries : 10; 
    U64 InStore : 1; 
    U64 Reserved : 9; 
    U64 PageFileHigh : 32; 
  }; 
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; 

typedef struct _MMPTE_TIMESTAMP
{
  struct 
  {
    U64 MustBeZero : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 Reserved : 20; 
    U64 GlobalTimeStamp : 32; 
  }; 
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; 

typedef struct _MMPTE_TRANSITION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Write : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 PageFrameNumber : 36; 
    U64 Unused : 16; 
  }; 
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; 

typedef struct _MMPTE_SUBSECTION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Unused0 : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Unused1 : 5; 
    S64 SubsectionAddress : 48; 
  }; 
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; 

typedef struct _MMPTE_LIST
{
  struct 
  {
    U64 Valid : 1; 
    U64 OneEntry : 1; 
    U64 filler0 : 3; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 filler1 : 20; 
    U64 NextEntry : 32; 
  }; 
} MMPTE_LIST, *PMMPTE_LIST; 

typedef struct _MMPTE
{
  union
  {
    union
    {
      U64 Long;
      volatile U64 VolatileLong;
      struct _MMPTE_HARDWARE Hard;
      struct _HARDWARE_PTE Flush;
      struct _MMPTE_PROTOTYPE Proto;
      struct _MMPTE_SOFTWARE Soft;
      struct _MMPTE_TIMESTAMP TimeStamp;
      struct _MMPTE_TRANSITION Trans;
      struct _MMPTE_SUBSECTION Subsect;
      struct _MMPTE_LIST List;
    }; 
  } u;
} MMPTE, *PMMPTE; 

typedef struct _MMPFN
{
  union
  {
    union
    {
      U64 Flink;
      U32 WsIndex;
      struct _KEVENT* Event;
      void* Next;
      void* volatile VolatileNext;
      struct _KTHREAD* KernelStackOwner;
      struct _SINGLE_LIST_ENTRY NextStackPfn;
    }; 
  } u1;
  union
  {
    union
    {
      U64 Blink;
      struct _MMPTE* ImageProtoPte;
      U64 ShareCount;
    }; 
  } u2;
  union
  {
    struct _MMPTE* PteAddress;
    void* volatile VolatilePteAddress;
    volatile S32 Lock;
    U64 PteLong;
  }; 
  union
  {
    union
    {
      struct
      {
        U16 ReferenceCount;
        struct _MMPFNENTRY e1;
      }; 
      struct
      {
        union
        {
          U16 ReferenceCount;
          volatile S16 VolatileReferenceCount;
        }; 
        U16 ShortFlags;
      } e2;
    }; 
  } u3;
  U16 UsedPageTableEntries;
  U8 VaType;
  U8 ViewCount;
  union
  {
    struct _MMPTE OriginalPte;
    volatile S32 AweReferenceCount;
  }; 
  union
  {
    struct 
    {
      U64 PteFrame : 52; 
      U64 Unused : 3; 
      U64 PfnImageVerified : 1; 
      U64 AweAllocation : 1; 
      U64 PrototypePte : 1; 
      U64 PageColor : 6; 
    }; 
  } u4;
} MMPFN, *PMMPFN; 

