typedef struct _RTL_BITMAP
{
  U32 SizeOfBitMap;
  U32* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; 

typedef struct _FREE_DISPLAY
{
  U32 RealVectorSize;
  struct _RTL_BITMAP Display;
} FREE_DISPLAY, *PFREE_DISPLAY; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DUAL
{
  U32 Length;
  struct _HMAP_DIRECTORY* Map;
  struct _HMAP_TABLE* SmallDir;
  U32 Guard;
  struct _FREE_DISPLAY FreeDisplay[24];
  U32 FreeSummary;
  struct _LIST_ENTRY FreeBins;
} DUAL, *PDUAL; 

typedef struct _HHIVE
{
  U32 Signature;
  void* GetCellRoutine;
  void* ReleaseCellRoutine;
  void* Allocate;
  void* Free;
  void* FileSetSize;
  void* FileWrite;
  void* FileRead;
  void* FileFlush;
  void* HiveLoadFailure;
  struct _HBASE_BLOCK* BaseBlock;
  struct _RTL_BITMAP DirtyVector;
  U32 DirtyCount;
  U32 DirtyAlloc;
  U32 BaseBlockAlloc;
  U32 Cluster;
  U8 Flat;
  U8 ReadOnly;
  U8 DirtyFlag;
  U32 HvBinHeadersUse;
  U32 HvFreeCellsUse;
  U32 HvUsedCellsUse;
  U32 CmUsedCellsUse;
  U32 HiveFlags;
  U32 CurrentLog;
  U32 LogSize[2];
  U32 RefreshCount;
  U32 StorageTypeCount;
  U32 Version;
  struct _DUAL Storage[2];
} HHIVE, *PHHIVE; 

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    U32 Count;
    void* Ptr;
  }; 
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _UNICODE_STRING
{
  U16 Length;
  U16 MaximumLength;
  U16* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; 

typedef struct _CM_WORKITEM
{
  struct _LIST_ENTRY ListEntry;
  U32 Private;
  void* WorkerRoutine;
  void* Parameter;
} CM_WORKITEM, *PCM_WORKITEM; 

typedef struct _CMHIVE
{
  struct _HHIVE Hive;
  void* FileHandles[6];
  struct _LIST_ENTRY NotifyList;
  struct _LIST_ENTRY HiveList;
  struct _LIST_ENTRY PreloadedHiveList;
  struct _EX_RUNDOWN_REF HiveRundown;
  struct _LIST_ENTRY ParseCacheEntries;
  struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;
  U32 KcbCacheTableSize;
  U32 Identity;
  struct _FAST_MUTEX* HiveLock;
  struct _EX_PUSH_LOCK ViewLock;
  struct _KTHREAD* ViewLockOwner;
  U32 ViewLockLast;
  U32 ViewUnLockLast;
  struct _FAST_MUTEX* WriterLock;
  struct _ERESOURCE* FlusherLock;
  struct _RTL_BITMAP FlushDirtyVector;
  struct CMP_OFFSET_ARRAY* FlushOffsetArray;
  U32 FlushOffsetArrayCount;
  U32 FlushHiveTruncated;
  struct _FAST_MUTEX* FlushLock2;
  struct _EX_PUSH_LOCK SecurityLock;
  struct _LIST_ENTRY MappedViewList;
  struct _LIST_ENTRY PinnedViewList;
  struct _LIST_ENTRY FlushedViewList;
  U16 MappedViewCount;
  U16 PinnedViewCount;
  U32 UseCount;
  U32 ViewsPerHive;
  struct _FILE_OBJECT* FileObject;
  U32 LastShrinkHiveSize;
  union _LARGE_INTEGER ActualFileSize;
  struct _UNICODE_STRING FileFullPath;
  struct _UNICODE_STRING FileUserName;
  struct _UNICODE_STRING HiveRootPath;
  U32 SecurityCount;
  U32 SecurityCacheSize;
  S32 SecurityHitHint;
  struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;
  struct _LIST_ENTRY SecurityHash[64];
  U32 UnloadEventCount;
  struct _KEVENT** UnloadEventArray;
  struct _CM_KEY_CONTROL_BLOCK* RootKcb;
  U8 Frozen;
  struct _CM_WORKITEM* UnloadWorkItem;
  struct _CM_WORKITEM UnloadWorkItemHolder;
  U8 GrowOnlyMode;
  U32 GrowOffset;
  struct _LIST_ENTRY KcbConvertListHead;
  struct _LIST_ENTRY KnodeConvertListHead;
  struct _CM_CELL_REMAP_BLOCK* CellRemapArray;
  U32 Flags;
  struct _LIST_ENTRY TrustClassEntry;
  U32 FlushCount;
  struct _CM_RM* CmRm;
  U32 CmRmInitFailPoint;
  S32 CmRmInitFailStatus;
  struct _KTHREAD* CreatorOwner;
  struct _KTHREAD* RundownThread;
} CMHIVE, *PCMHIVE; 

