typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 TimerControlFlags;
        struct 
        {
          U8 Absolute : 1; 
          U8 Wake : 1; 
          U8 EncodedTolerableDelay : 6; 
        }; 
        U8 QueueControlFlags;
        struct 
        {
          U8 Abandoned : 1; 
          U8 DisableIncrement : 1; 
        }; 
        U8 Signalling;
        U8 Timer2Flags;
        struct
        {
          struct 
          {
            U8 Timer2Inserted : 1; 
            U8 Timer2Expiring : 1; 
            U8 Timer2CancelPending : 1; 
            U8 Timer2SetPending : 1; 
            U8 Timer2Running : 1; 
            U8 Timer2Disabled : 1; 
            U8 Reserved1 : 2; 
          }; 
          union
          {
            U8 ThreadControlFlags;
            struct 
            {
              U8 CycleProfiling : 1; 
              U8 CounterProfiling : 1; 
              U8 GroupScheduling : 1; 
              U8 AffinitySet : 1; 
              U8 Reserved2 : 4; 
            }; 
            U8 Hand;
            U8 Reserved3;
            struct
            {
              U8 Size;
              union
              {
                U8 TimerMiscFlags;
                struct 
                {
                  U8 Index : 6; 
                  U8 Inserted : 1; 
                  volatile U8 Expired : 1; 
                }; 
                U8 DebugActive;
                struct 
                {
                  U8 ActiveDR7 : 1; 
                  U8 Instrumented : 1; 
                  U8 Minimal : 1; 
                  U8 Reserved4 : 3; 
                  U8 UmsScheduled : 1; 
                  U8 UmsPrimary : 1; 
                }; 
                U8 DpcActive;
                U8 Reserved5;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
    S32 LockNV;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KGATE
{
  struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; 

typedef struct _MMSECURE_FLAGS
{
  struct 
  {
    U32 ReadOnly : 1; 
    U32 ReadWrite : 1; 
    U32 SecNoChange : 1; 
    U32 NoDelete : 1; 
    U32 RequiresPteReversal : 1; 
    U32 ExclusiveSecure : 1; 
    U32 Spare : 6; 
  }; 
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; 

typedef struct _MMADDRESS_LIST
{
  union
  {
    union
    {
      struct _MMSECURE_FLAGS Flags;
      U32 FlagsLong;
      void* StartVa;
    }; 
  } u1;
  void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; 

typedef struct _RTL_BITMAP_EX
{
  U64 SizeOfBitMap;
  U64* Buffer;
} RTL_BITMAP_EX, *PRTL_BITMAP_EX; 

typedef struct _MI_PHYSMEM_BLOCK
{
  struct _MMIO_TRACKER* IoTracker;
} MI_PHYSMEM_BLOCK, *PMI_PHYSMEM_BLOCK; 

typedef struct _MI_VAD_EVENT_BLOCK
{
  struct _MI_VAD_EVENT_BLOCK* Next;
  U32 WaitReason;
  union
  {
    struct _KGATE Gate;
    struct _MMADDRESS_LIST SecureInfo;
    struct _RTL_BITMAP_EX BitMap;
    struct _MMINPAGE_SUPPORT* InPageSupport;
    struct _MI_PHYSMEM_BLOCK PhysicalMemory;
    struct
    {
      struct _MI_LARGEPAGE_MEMORY_INFO* LargePage;
      S32 __PADDING__[4];
    }; 
  }; 
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; 

