typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileMaximumInformation = 63,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMaximumInformation = 13,
} FSINFOCLASS, *PFSINFOCLASS;

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct 
    {
      U32 Reserved1 : 8; 
      U32 TargetSystemState : 4; 
      U32 EffectiveSystemState : 4; 
      U32 CurrentSystemState : 4; 
      U32 IgnoreHibernationPath : 1; 
      U32 PseudoTransition : 1; 
      U32 Reserved2 : 10; 
    }; 
    U32 ContextAsUlong;
  }; 
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; 

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef union _POWER_STATE
{
  union
  {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
  }; 
} POWER_STATE, *PPOWER_STATE; 

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
};

typedef struct _IO_STACK_LOCATION
{
  U8 MajorFunction;
  U8 MinorFunction;
  U8 Flags;
  U8 Control;
  union
  {
    union
    {
      struct
      {
        struct _IO_SECURITY_CONTEXT* SecurityContext;
        U32 Options;
        U16 FileAttributes;
        U16 ShareAccess;
        U32 EaLength;
      } Create;
      struct
      {
        struct _IO_SECURITY_CONTEXT* SecurityContext;
        U32 Options;
        U16 Reserved;
        U16 ShareAccess;
        struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } CreatePipe;
      struct
      {
        struct _IO_SECURITY_CONTEXT* SecurityContext;
        U32 Options;
        U16 Reserved;
        U16 ShareAccess;
        struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } CreateMailslot;
      struct
      {
        U32 Length;
        U32 Key;
        union _LARGE_INTEGER ByteOffset;
      } Read;
      struct
      {
        U32 Length;
        U32 Key;
        union _LARGE_INTEGER ByteOffset;
      } Write;
      struct
      {
        U32 Length;
        struct _UNICODE_STRING* FileName;
        enum _FILE_INFORMATION_CLASS FileInformationClass;
        U32 FileIndex;
      } QueryDirectory;
      struct
      {
        U32 Length;
        U32 CompletionFilter;
      } NotifyDirectory;
      struct
      {
        U32 Length;
        enum _FILE_INFORMATION_CLASS FileInformationClass;
      } QueryFile;
      struct
      {
        U32 Length;
        enum _FILE_INFORMATION_CLASS FileInformationClass;
        struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            U8 ReplaceIfExists;
            U8 AdvanceOnly;
          }; 
          U32 ClusterCount;
          void* DeleteHandle;
        }; 
      } SetFile;
      struct
      {
        U32 Length;
        void* EaList;
        U32 EaListLength;
        U32 EaIndex;
      } QueryEa;
      struct
      {
        U32 Length;
      } SetEa;
      struct
      {
        U32 Length;
        enum _FSINFOCLASS FsInformationClass;
      } QueryVolume;
      struct
      {
        U32 Length;
        enum _FSINFOCLASS FsInformationClass;
      } SetVolume;
      struct
      {
        U32 OutputBufferLength;
        U32 InputBufferLength;
        U32 FsControlCode;
        void* Type3InputBuffer;
      } FileSystemControl;
      struct
      {
        union _LARGE_INTEGER* Length;
        U32 Key;
        union _LARGE_INTEGER ByteOffset;
      } LockControl;
      struct
      {
        U32 OutputBufferLength;
        U32 InputBufferLength;
        U32 IoControlCode;
        void* Type3InputBuffer;
      } DeviceIoControl;
      struct
      {
        U32 SecurityInformation;
        U32 Length;
      } QuerySecurity;
      struct
      {
        U32 SecurityInformation;
        void* SecurityDescriptor;
      } SetSecurity;
      struct
      {
        struct _VPB* Vpb;
        struct _DEVICE_OBJECT* DeviceObject;
      } MountVolume;
      struct
      {
        struct _VPB* Vpb;
        struct _DEVICE_OBJECT* DeviceObject;
      } VerifyVolume;
      struct
      {
        struct _SCSI_REQUEST_BLOCK* Srb;
      } Scsi;
      struct
      {
        U32 Length;
        void* StartSid;
        struct _FILE_GET_QUOTA_INFORMATION* SidList;
        U32 SidListLength;
      } QueryQuota;
      struct
      {
        U32 Length;
      } SetQuota;
      struct
      {
        enum _DEVICE_RELATION_TYPE Type;
      } QueryDeviceRelations;
      struct
      {
        const struct _GUID* InterfaceType;
        U16 Size;
        U16 Version;
        struct _INTERFACE* Interface;
        void* InterfaceSpecificData;
      } QueryInterface;
      struct
      {
        struct _DEVICE_CAPABILITIES* Capabilities;
      } DeviceCapabilities;
      struct
      {
        struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } FilterResourceRequirements;
      struct
      {
        U32 WhichSpace;
        void* Buffer;
        U32 Offset;
        U32 Length;
      } ReadWriteConfig;
      struct
      {
        U8 Lock;
      } SetLock;
      struct
      {
        enum BUS_QUERY_ID_TYPE IdType;
      } QueryId;
      struct
      {
        enum DEVICE_TEXT_TYPE DeviceTextType;
        U32 LocaleId;
      } QueryDeviceText;
      struct
      {
        U8 InPath;
        U8 Reserved[3];
        enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
      } UsageNotification;
      struct
      {
        enum _SYSTEM_POWER_STATE PowerState;
      } WaitWake;
      struct
      {
        struct _POWER_SEQUENCE* PowerSequence;
      } PowerSequence;
      struct
      {
        union
        {
          U32 SystemContext;
          struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; 
        enum _POWER_STATE_TYPE Type;
        union _POWER_STATE State;
        enum POWER_ACTION ShutdownType;
      } Power;
      struct
      {
        struct _CM_RESOURCE_LIST* AllocatedResources;
        struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } StartDevice;
      struct
      {
        U32 ProviderId;
        void* DataPath;
        U32 BufferSize;
        void* Buffer;
      } WMI;
      struct
      {
        void* Argument1;
        void* Argument2;
        void* Argument3;
        void* Argument4;
      } Others;
    }; 
  } Parameters;
  struct _DEVICE_OBJECT* DeviceObject;
  struct _FILE_OBJECT* FileObject;
  void* CompletionRoutine;
  void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; 

