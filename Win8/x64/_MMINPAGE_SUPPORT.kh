typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 TimerControlFlags;
        struct 
        {
          U8 Absolute : 1; 
          U8 Wake : 1; 
          U8 EncodedTolerableDelay : 6; 
        }; 
        U8 Abandoned;
        struct
        {
          U8 Signalling;
          union
          {
            U8 ThreadControlFlags;
            struct 
            {
              U8 CycleProfiling : 1; 
              U8 CounterProfiling : 1; 
              U8 GroupScheduling : 1; 
              U8 AffinitySet : 1; 
              U8 Reserved : 4; 
            }; 
            U8 Hand;
            struct
            {
              U8 Size;
              union
              {
                U8 TimerMiscFlags;
                struct 
                {
                  U8 Index : 6; 
                  U8 Inserted : 1; 
                  volatile U8 Expired : 1; 
                }; 
                U8 DebugActive;
                struct 
                {
                  U8 ActiveDR7 : 1; 
                  U8 Instrumented : 1; 
                  U8 Reserved2 : 4; 
                  U8 UmsScheduled : 1; 
                  U8 UmsPrimary : 1; 
                }; 
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
    S32 LockNV;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    S32 Status;
    void* Pointer;
  }; 
  U64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _MMPTE_HARDWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Dirty1 : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Accessed : 1; 
    U64 Dirty : 1; 
    U64 LargePage : 1; 
    U64 Global : 1; 
    U64 CopyOnWrite : 1; 
    U64 Unused : 1; 
    U64 Write : 1; 
    U64 PageFrameNumber : 36; 
    U64 reserved1 : 4; 
    U64 SoftwareWsIndex : 11; 
    U64 NoExecute : 1; 
  }; 
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; 

typedef struct _HARDWARE_PTE
{
  struct 
  {
    U64 Valid : 1; 
    U64 Write : 1; 
    U64 Owner : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Accessed : 1; 
    U64 Dirty : 1; 
    U64 LargePage : 1; 
    U64 Global : 1; 
    U64 CopyOnWrite : 1; 
    U64 Prototype : 1; 
    U64 reserved0 : 1; 
    U64 PageFrameNumber : 36; 
    U64 reserved1 : 4; 
    U64 SoftwareWsIndex : 11; 
    U64 NoExecute : 1; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _MMPTE_PROTOTYPE
{
  struct 
  {
    U64 Valid : 1; 
    U64 DemandFillProto : 1; 
    U64 HiberVerifyConverted : 1; 
    U64 Unused1 : 5; 
    U64 ReadOnly : 1; 
    U64 Combined : 1; 
    U64 Prototype : 1; 
    U64 Protection : 5; 
    S64 ProtoAddress : 48; 
  }; 
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; 

typedef struct _MMPTE_SOFTWARE
{
  struct 
  {
    U64 Valid : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 InStore : 1; 
    U64 PageFileReserved : 1; 
    U64 PageFileAllocated : 1; 
    U64 UsedPageTableEntries : 10; 
    U64 DbgCrc : 7; 
    U64 PageFileHigh : 32; 
  }; 
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; 

typedef struct _MMPTE_TIMESTAMP
{
  struct 
  {
    U64 MustBeZero : 1; 
    U64 PageFileLow : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 Reserved : 20; 
    U64 GlobalTimeStamp : 32; 
  }; 
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; 

typedef struct _MMPTE_TRANSITION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Write : 1; 
    U64 Spare : 1; 
    U64 WriteThrough : 1; 
    U64 CacheDisable : 1; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 PageFrameNumber : 36; 
    U64 Unused : 16; 
  }; 
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; 

typedef struct _MMPTE_SUBSECTION
{
  struct 
  {
    U64 Valid : 1; 
    U64 Unused0 : 4; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Unused1 : 5; 
    S64 SubsectionAddress : 48; 
  }; 
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; 

typedef struct _MMPTE_LIST
{
  struct 
  {
    U64 Valid : 1; 
    U64 OneEntry : 1; 
    U64 filler0 : 3; 
    U64 Protection : 5; 
    U64 Prototype : 1; 
    U64 Transition : 1; 
    U64 filler1 : 20; 
    U64 NextEntry : 32; 
  }; 
} MMPTE_LIST, *PMMPTE_LIST; 

typedef struct _MMPTE
{
  union
  {
    union
    {
      U64 Long;
      volatile U64 VolatileLong;
      struct _MMPTE_HARDWARE Hard;
      struct _HARDWARE_PTE Flush;
      struct _MMPTE_PROTOTYPE Proto;
      struct _MMPTE_SOFTWARE Soft;
      struct _MMPTE_TIMESTAMP TimeStamp;
      struct _MMPTE_TRANSITION Trans;
      struct _MMPTE_SUBSECTION Subsect;
      struct _MMPTE_LIST List;
    }; 
  } u;
} MMPTE, *PMMPTE; 

typedef struct _MMINPAGE_FLAGS
{
  struct 
  {
    U8 InjectRetry : 1; 
    U8 CrossThreadPadding : 7; 
  }; 
  struct 
  {
    U8 PrefetchSystemVmType : 2; 
    U8 VaPrefetchReadBlock : 1; 
    U8 CollidedFlowThrough : 1; 
    U8 ForceCollisions : 1; 
    U8 InPageExpanded : 1; 
    U8 IssuedAtLowPriority : 1; 
    U8 FaultFromStore : 1; 
  }; 
  struct 
  {
    U8 PagePriority : 3; 
    U8 PerformRelocations : 1; 
    U8 ClusteredPagePriority : 3; 
    U8 MakeClusterValid : 1; 
  }; 
  struct 
  {
    U8 ZeroLastPage : 1; 
    U8 UserFault : 1; 
    U8 BoostedPriority : 1; 
    U8 StandbyProtectionNeeded : 1; 
    U8 PteChanged : 1; 
    U8 PageFileFault : 1; 
    U8 Spare1 : 2; 
  }; 
} MMINPAGE_FLAGS, *PMMINPAGE_FLAGS; 

typedef struct _MDL
{
  struct _MDL* Next;
  S16 Size;
  S16 MdlFlags;
  U16 AllocationProcessorNumber;
  U16 Reserved;
  struct _EPROCESS* Process;
  void* MappedSystemVa;
  void* StartVa;
  U32 ByteCount;
  U32 ByteOffset;
} MDL, *PMDL; 

typedef struct _MMINPAGE_SUPPORT
{
  struct _LIST_ENTRY ListEntry;
  struct _ETHREAD* Thread;
  struct _LIST_ENTRY ListHead;
  struct _KEVENT Event;
  struct _KEVENT CollidedEvent;
  struct _IO_STATUS_BLOCK IoStatus;
  union _LARGE_INTEGER ReadOffset;
  struct _MMPTE PteContents;
  struct _MMPFN* LockedProtoPfn;
  volatile S32 WaitCount;
  U32 ByteCount;
  union
  {
    union
    {
      U32 ImagePteOffset;
      U32 TossPage;
    }; 
  } u3;
  union
  {
    union
    {
      struct _MMINPAGE_FLAGS e1;
      U32 LongFlags;
    }; 
  } u1;
  struct _FILE_OBJECT* FilePointer;
  struct _CONTROL_AREA* ControlArea;
  void* FaultingAddress;
  struct _MMPTE* PointerPte;
  struct _MMPTE* BasePte;
  struct _MMPFN* Pfn;
  struct _MDL* PrefetchMdl;
  struct _MDL Mdl;
  U64 Page[16];
} MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT; 

