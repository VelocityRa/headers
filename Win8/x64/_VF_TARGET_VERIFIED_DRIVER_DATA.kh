typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef union _SLIST_HEADER
{
  union
  {
    struct
    {
      U64 Alignment;
      U64 Region;
    }; 
    struct
    {
      struct 
      {
        U64 Depth : 16; 
        U64 Sequence : 9; 
        U64 NextEntry : 39; 
      }; 
      struct 
      {
        U64 HeaderType : 1; 
        U64 Init : 1; 
        U64 Reserved : 59; 
        U64 Region : 3; 
      }; 
    } Header8;
    struct
    {
      struct 
      {
        U64 Depth : 16; 
        U64 Sequence : 48; 
      }; 
      struct 
      {
        U64 HeaderType : 1; 
        U64 Reserved : 3; 
        U64 NextEntry : 60; 
      }; 
    } HeaderX64;
  }; 
} SLIST_HEADER, *PSLIST_HEADER; 

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;
  void* WMICallback;
  struct _LIST_ENTRY EtwHandlesListHead;
  union
  {
    union
    {
      struct
      {
        struct 
        {
          U32 MissedEtwRegistration : 1; 
          U32 Spare : 31; 
        }; 
      } Flags;
      U32 Whole;
    }; 
  } u1;
  U64 Signature;
  union _SLIST_HEADER PoolPageHeaders;
  union _SLIST_HEADER PoolTrackers;
  volatile U32 CurrentPagedPoolAllocations;
  volatile U32 CurrentNonPagedPoolAllocations;
  U32 PeakPagedPoolAllocations;
  U32 PeakNonPagedPoolAllocations;
  volatile U64 PagedBytes;
  volatile U64 NonPagedBytes;
  U64 PeakPagedBytes;
  U64 PeakNonPagedBytes;
  U32 RaiseIrqls;
  U32 AcquireSpinLocks;
  U32 SynchronizeExecutions;
  U32 AllocationsWithNoTag;
  U32 AllocationsFailed;
  U32 AllocationsFailedDeliberately;
  U64 LockedBytes;
  U64 PeakLockedBytes;
  U64 MappedLockedBytes;
  U64 PeakMappedLockedBytes;
  U64 MappedIoSpaceBytes;
  U64 PeakMappedIoSpaceBytes;
  U64 PagesForMdlBytes;
  U64 PeakPagesForMdlBytes;
  U64 ContiguousMemoryBytes;
  U64 PeakContiguousMemoryBytes;
  struct _LIST_ENTRY ContiguousMemoryListHead;
  S32 __PADDING__[2];
} VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA; 

