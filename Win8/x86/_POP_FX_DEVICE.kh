typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _POP_FX_DRIVER_CALLBACKS
{
  void* ComponentActive;
  void* ComponentIdle;
  void* ComponentIdleState;
  void* DevicePowerRequired;
  void* DevicePowerNotRequired;
  void* PowerControl;
  void* ComponentCriticalTransition;
} POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 TimerControlFlags;
        struct 
        {
          U8 Absolute : 1; 
          U8 Wake : 1; 
          U8 EncodedTolerableDelay : 6; 
        }; 
        U8 Abandoned;
        struct
        {
          U8 Signalling;
          union
          {
            U8 ThreadControlFlags;
            struct 
            {
              U8 CycleProfiling : 1; 
              U8 CounterProfiling : 1; 
              U8 GroupScheduling : 1; 
              U8 AffinitySet : 1; 
              U8 Reserved : 4; 
            }; 
            U8 Hand;
            struct
            {
              U8 Size;
              union
              {
                U8 TimerMiscFlags;
                struct 
                {
                  U8 Index : 1; 
                  U8 Processor : 5; 
                  U8 Inserted : 1; 
                  volatile U8 Expired : 1; 
                }; 
                U8 DebugActive;
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
    S32 LockNV;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  U8 Removed;
  U8 Reserved[3];
  S32 IoCount;
  struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; 

typedef struct _IO_REMOVE_LOCK
{
  struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; 

typedef struct _WORK_QUEUE_ITEM
{
  struct _LIST_ENTRY List;
  void* WorkerRoutine;
  void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; 

typedef struct _POP_FX_WORK_ORDER
{
  struct _WORK_QUEUE_ITEM WorkItem;
  S32 WorkCount;
} POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER; 

typedef union _POP_FX_DEVICE_STATUS
{
  union
  {
    S32 Value;
    struct 
    {
      U32 SystemTransition : 1; 
      U32 PepD0Notify : 1; 
      U32 IdleTimerOn : 1; 
      U32 IgnoreIdleTimeout : 1; 
      U32 IrpInUse : 1; 
      U32 IrpPending : 1; 
      U32 DPNRDeviceNotified : 1; 
      U32 DPNRReceivedFromPep : 1; 
      U32 Reserved : 24; 
    }; 
  }; 
} POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS; 

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      U32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      U32 HighPart;
    } u;
    U64 QuadPart;
  }; 
} ULARGE_INTEGER, *PULARGE_INTEGER; 

typedef struct _KTIMER
{
  struct _DISPATCHER_HEADER Header;
  union _ULARGE_INTEGER DueTime;
  struct _LIST_ENTRY TimerListEntry;
  struct _KDPC* Dpc;
  U32 Period;
} KTIMER, *PKTIMER; 

typedef struct _KDPC
{
  U8 Type;
  U8 Importance;
  volatile U16 Number;
  struct _LIST_ENTRY DpcListEntry;
  void* DeferredRoutine;
  void* DeferredContext;
  void* SystemArgument1;
  void* SystemArgument2;
  void* DpcData;
} KDPC, *PKDPC; 

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef union _POWER_STATE
{
  union
  {
    enum _SYSTEM_POWER_STATE SystemState;
    enum _DEVICE_POWER_STATE DeviceState;
  }; 
} POWER_STATE, *PPOWER_STATE; 

typedef struct _POP_FX_DEVICE
{
  struct _LIST_ENTRY Link;
  struct _POP_FX_PLUGIN* Plugin;
  struct PEPHANDLE__* PluginHandle;
  struct _POP_FX_PLUGIN* MiniPlugin;
  struct PEPHANDLE__* MiniPluginHandle;
  struct _DEVICE_NODE* DevNode;
  struct _DEVICE_OBJECT* DeviceObject;
  struct _DEVICE_OBJECT* TargetDevice;
  struct _POP_FX_DRIVER_CALLBACKS Callbacks;
  void* DriverContext;
  struct _IO_REMOVE_LOCK RemoveLock;
  struct _POP_FX_WORK_ORDER WorkOrder;
  volatile union _POP_FX_DEVICE_STATUS Status;
  volatile S32 PowerReqCall;
  volatile S32 PowerNotReqCall;
  U32 IdleLock;
  struct _KTIMER IdleTimer;
  struct _KDPC IdleDpc;
  U64 IdleTimeout;
  U64 IdleStamp;
  struct _IRP* Irp;
  struct _POP_IRP_DATA* IrpData;
  struct _DEVICE_OBJECT* NextIrpDeviceObject;
  union _POWER_STATE NextIrpPowerState;
  void* NextIrpCallerCompletion;
  void* NextIrpCallerContext;
  struct _KEVENT IrpCompleteEvent;
  U32 ComponentCount;
  struct _POP_FX_COMPONENT* Components[1];
} POP_FX_DEVICE, *PPOP_FX_DEVICE; 

