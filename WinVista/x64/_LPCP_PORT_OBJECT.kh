typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _LPCP_PORT_QUEUE
{
  struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;
  struct _KSEMAPHORE* Semaphore;
  struct _LIST_ENTRY ReceiveHead;
} LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE; 

typedef struct _CLIENT_ID
{
  void* UniqueProcess;
  void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; 

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  U32 Length;
  enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  U8 ContextTrackingMode;
  U8 EffectiveOnly;
  char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; 

typedef struct _LUID
{
  U32 LowPart;
  S32 HighPart;
} LUID, *PLUID; 

typedef struct _TOKEN_SOURCE
{
  char SourceName[8];
  struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; 

typedef struct _TOKEN_CONTROL
{
  struct _LUID TokenId;
  struct _LUID AuthenticationId;
  struct _LUID ModifiedId;
  struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; 

typedef struct _SECURITY_CLIENT_CONTEXT
{
  struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  void* ClientToken;
  U8 DirectlyAccessClientToken;
  U8 DirectAccessEffectiveOnly;
  U8 ServerIsRemote;
  struct _TOKEN_CONTROL ClientTokenControl;
  S32 __PADDING__[1];
} SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 Abandoned;
        U8 Absolute;
        U8 NpxIrql;
        struct
        {
          U8 Signalling;
          union
          {
            U8 Size;
            struct
            {
              U8 Hand;
              union
              {
                U8 Inserted;
                U8 DebugActive;
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _LPCP_PORT_OBJECT
{
  struct _LPCP_PORT_OBJECT* ConnectionPort;
  struct _LPCP_PORT_OBJECT* ConnectedPort;
  struct _LPCP_PORT_QUEUE MsgQueue;
  struct _CLIENT_ID Creator;
  void* ClientSectionBase;
  void* ServerSectionBase;
  void* PortContext;
  struct _ETHREAD* ClientThread;
  struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  struct _LIST_ENTRY LpcReplyChainHead;
  struct _LIST_ENTRY LpcDataInfoChainHead;
  union
  {
    struct _EPROCESS* ServerProcess;
    struct _EPROCESS* MappingProcess;
  }; 
  U16 MaxMessageLength;
  U16 MaxConnectionInfoLength;
  U32 Flags;
  struct _KEVENT WaitEvent;
} LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT; 

