typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 Abandoned;
        U8 Absolute;
        U8 NpxIrql;
        struct
        {
          U8 Signalling;
          union
          {
            U8 Size;
            struct
            {
              U8 Hand;
              union
              {
                U8 Inserted;
                U8 DebugActive;
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KAPC_STATE
{
  struct _LIST_ENTRY ApcListHead[2];
  struct _KPROCESS* Process;
  U8 KernelApcInProgress;
  U8 KernelApcPending;
  U8 UserApcPending;
  char __PADDING__[1];
} KAPC_STATE, *PKAPC_STATE; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      U32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      U32 HighPart;
    } u;
    U64 QuadPart;
  }; 
} ULARGE_INTEGER, *PULARGE_INTEGER; 

typedef struct _KTIMER
{
  struct _DISPATCHER_HEADER Header;
  union _ULARGE_INTEGER DueTime;
  struct _LIST_ENTRY TimerListEntry;
  struct _KDPC* Dpc;
  S32 Period;
} KTIMER, *PKTIMER; 

typedef struct _KWAIT_BLOCK
{
  struct _LIST_ENTRY WaitListEntry;
  struct _KTHREAD* Thread;
  void* Object;
  struct _KWAIT_BLOCK* NextWaitBlock;
  U16 WaitKey;
  U8 WaitType;
  U8 SpareByte;
} KWAIT_BLOCK, *PKWAIT_BLOCK; 

typedef struct _KAPC
{
  U8 Type;
  U8 SpareByte0;
  U8 Size;
  U8 SpareByte1;
  U32 SpareLong0;
  struct _KTHREAD* Thread;
  struct _LIST_ENTRY ApcListEntry;
  void* KernelRoutine;
  void* RundownRoutine;
  void* NormalRoutine;
  void* NormalContext;
  void* SystemArgument1;
  void* SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  U8 Inserted;
  char __PADDING__[1];
} KAPC, *PKAPC; 

typedef struct _KSEMAPHORE
{
  struct _DISPATCHER_HEADER Header;
  S32 Limit;
} KSEMAPHORE, *PKSEMAPHORE; 

typedef struct _KTHREAD
{
  struct _DISPATCHER_HEADER Header;
  volatile U64 CycleTime;
  volatile U32 HighCycleTime;
  U64 QuantumTarget;
  void* InitialStack;
  void* volatile StackLimit;
  void* KernelStack;
  U32 ThreadLock;
  union
  {
    struct _KAPC_STATE ApcState;
    struct
    {
      U8 ApcStateFill[23];
      char Priority;
    }; 
  }; 
  volatile U16 NextProcessor;
  volatile U16 DeferredProcessor;
  U32 ApcQueueLock;
  U32 ContextSwitches;
  volatile U8 State;
  U8 NpxState;
  U8 WaitIrql;
  char WaitMode;
  S32 WaitStatus;
  union
  {
    struct _KWAIT_BLOCK* WaitBlockList;
    struct _KGATE* GateObject;
  }; 
  union
  {
    struct 
    {
      U32 KernelStackResident : 1; 
      U32 ReadyTransition : 1; 
      U32 ProcessReadyQueue : 1; 
      U32 WaitNext : 1; 
      U32 SystemAffinityActive : 1; 
      U32 Alertable : 1; 
      U32 GdiFlushActive : 1; 
      U32 Reserved : 25; 
    }; 
    S32 MiscFlags;
  }; 
  U8 WaitReason;
  volatile U8 SwapBusy;
  U8 Alerted[2];
  union
  {
    struct _LIST_ENTRY WaitListEntry;
    struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; 
  struct _KQUEUE* Queue;
  U32 WaitTime;
  union
  {
    struct
    {
      S16 KernelApcDisable;
      S16 SpecialApcDisable;
    }; 
    U32 CombinedApcDisable;
  }; 
  void* Teb;
  union
  {
    struct _KTIMER Timer;
    U8 TimerFill[40];
  }; 
  union
  {
    struct 
    {
      volatile U32 AutoAlignment : 1; 
      volatile U32 DisableBoost : 1; 
      volatile U32 EtwStackTraceApc1Inserted : 1; 
      volatile U32 EtwStackTraceApc2Inserted : 1; 
      volatile U32 CycleChargePending : 1; 
      volatile U32 CalloutActive : 1; 
      volatile U32 ApcQueueable : 1; 
      volatile U32 EnableStackSwap : 1; 
      volatile U32 GuiThread : 1; 
      volatile U32 ReservedFlags : 23; 
    }; 
    volatile S32 ThreadFlags;
  }; 
  union
  {
    struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      U8 WaitBlockFill0[23];
      U8 IdealProcessor;
    }; 
    struct
    {
      U8 WaitBlockFill1[47];
      char PreviousMode;
    }; 
    struct
    {
      U8 WaitBlockFill2[71];
      U8 ResourceIndex;
    }; 
    struct
    {
      U8 WaitBlockFill3[95];
      U8 LargeStack;
    }; 
  }; 
  struct _LIST_ENTRY QueueListEntry;
  struct _KTRAP_FRAME* TrapFrame;
  void* FirstArgument;
  union
  {
    void* CallbackStack;
    U32 CallbackDepth;
  }; 
  void* ServiceTable;
  U8 ApcStateIndex;
  char BasePriority;
  char PriorityDecrement;
  U8 Preempted;
  U8 AdjustReason;
  char AdjustIncrement;
  U8 Spare01;
  char Saturation;
  U32 SystemCallNumber;
  U32 Spare02;
  U32 UserAffinity;
  struct _KPROCESS* Process;
  volatile U32 Affinity;
  struct _KAPC_STATE* ApcStatePointer[2];
  union
  {
    struct _KAPC_STATE SavedApcState;
    struct
    {
      U8 SavedApcStateFill[23];
      char FreezeCount;
    }; 
  }; 
  char SuspendCount;
  U8 UserIdealProcessor;
  U8 Spare03;
  U8 Iopl;
  void* volatile Win32Thread;
  void* StackBase;
  union
  {
    struct _KAPC SuspendApc;
    struct
    {
      U8 SuspendApcFill0[1];
      char Spare04;
    }; 
    struct
    {
      U8 SuspendApcFill1[3];
      U8 QuantumReset;
    }; 
    struct
    {
      U8 SuspendApcFill2[4];
      U32 KernelTime;
    }; 
    struct
    {
      U8 SuspendApcFill3[36];
      struct _KPRCB* WaitPrcb;
    }; 
    struct
    {
      U8 SuspendApcFill4[40];
      void* LegoData;
    }; 
    struct
    {
      U8 SuspendApcFill5[47];
      U8 PowerState;
    }; 
  }; 
  U32 UserTime;
  union
  {
    struct _KSEMAPHORE SuspendSemaphore;
    U8 SuspendSemaphorefill[20];
  }; 
  U32 SListFaultCount;
  struct _LIST_ENTRY ThreadListEntry;
  struct _LIST_ENTRY MutantListHead;
  void* SListFaultAddress;
  void* volatile MdlForLockedTeb;
  S32 __PADDING__[1];
} KTHREAD, *PKTHREAD; 

