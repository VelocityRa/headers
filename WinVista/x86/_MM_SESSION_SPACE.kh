typedef struct _MM_SESSION_SPACE_FLAGS
{
  struct 
  {
    U32 Initialized : 1; 
    U32 DeletePending : 1; 
    U32 PoolInitialized : 1; 
    U32 DynamicVaInitialized : 1; 
    U32 WsInitialized : 1; 
    U32 PoolDestroyed : 1; 
    U32 ObjectInitialized : 1; 
    U32 Filler : 25; 
  }; 
} MM_SESSION_SPACE_FLAGS, *PMM_SESSION_SPACE_FLAGS; 

typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 Abandoned;
        U8 Absolute;
        U8 NpxIrql;
        struct
        {
          U8 Signalling;
          union
          {
            U8 Size;
            struct
            {
              U8 Hand;
              union
              {
                U8 Inserted;
                U8 DebugActive;
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KEVENT
{
  struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef union _SLIST_HEADER
{
  union
  {
    U64 Alignment;
    struct
    {
      struct _SINGLE_LIST_ENTRY Next;
      U16 Depth;
      U16 Sequence;
    }; 
  }; 
} SLIST_HEADER, *PSLIST_HEADER; 

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    union _SLIST_HEADER ListHead;
    struct _SINGLE_LIST_ENTRY SingleListHead;
  }; 
  U16 Depth;
  U16 MaximumDepth;
  U32 TotalAllocates;
  union
  {
    U32 AllocateMisses;
    U32 AllocateHits;
  }; 
  U32 TotalFrees;
  union
  {
    U32 FreeMisses;
    U32 FreeHits;
  }; 
  enum _POOL_TYPE Type;
  U32 Tag;
  U32 Size;
  union
  {
    void* AllocateEx;
    void* Allocate;
  }; 
  union
  {
    void* FreeEx;
    void* Free;
  }; 
  struct _LIST_ENTRY ListEntry;
  U32 LastTotalAllocates;
  union
  {
    U32 LastAllocateMisses;
    U32 LastAllocateHits;
  }; 
  U32 Future[2];
  S32 __PADDING__[14];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; 

typedef struct _KGATE
{
  struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; 

typedef struct _KGUARDED_MUTEX
{
  volatile S32 Count;
  struct _KTHREAD* Owner;
  U32 Contention;
  struct _KGATE Gate;
  union
  {
    struct
    {
      S16 KernelApcDisable;
      S16 SpecialApcDisable;
    }; 
    U32 CombinedApcDisable;
  }; 
} KGUARDED_MUTEX, *PKGUARDED_MUTEX; 

typedef struct _MMSESSION
{
  struct _KGUARDED_MUTEX SystemSpaceViewLock;
  struct _KGUARDED_MUTEX* SystemSpaceViewLockPointer;
  struct _MMVIEW* SystemSpaceViewTable;
  U32 SystemSpaceHashSize;
  U32 SystemSpaceHashEntries;
  U32 SystemSpaceHashKey;
  U32 BitmapFailures;
} MMSESSION, *PMMSESSION; 

typedef struct _RTL_BITMAP
{
  U32 SizeOfBitMap;
  U32* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; 

typedef struct _MM_PAGED_POOL_INFO
{
  struct _KGUARDED_MUTEX Mutex;
  struct _RTL_BITMAP PagedPoolAllocationMap;
  struct _MMPTE* FirstPteForPagedPool;
  U32 PagedPoolHint;
  volatile U32 PagedPoolCommit;
  volatile U32 AllocatedPagedPool;
} MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO; 

typedef struct _MMSUPPORT_FLAGS
{
  struct 
  {
    U8 SessionSpace : 1; 
    U8 ModwriterAttached : 1; 
    U8 TrimHard : 1; 
    U8 MaximumWorkingSetHard : 1; 
    U8 ForceTrim : 1; 
    U8 MinimumWorkingSetHard : 1; 
    U8 SessionMaster : 1; 
    U8 TrimmerAttached : 1; 
  }; 
  struct 
  {
    U8 TrimmerDetaching : 1; 
    U8 Reserved : 7; 
  }; 
  U8 MemoryPriority : 8; 
  struct 
  {
    U8 WsleDeleted : 1; 
    U8 VmExiting : 1; 
    U8 Available : 6; 
  }; 
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _MMSUPPORT
{
  struct _LIST_ENTRY WorkingSetExpansionLinks;
  U16 LastTrimStamp;
  U16 NextPageColor;
  struct _MMSUPPORT_FLAGS Flags;
  U32 PageFaultCount;
  U32 PeakWorkingSetSize;
  U32 Spare0;
  U32 MinimumWorkingSetSize;
  U32 MaximumWorkingSetSize;
  struct _MMWSL* VmWorkingSetList;
  U32 Claim;
  U32 Spare[1];
  U32 WorkingSetPrivateSize;
  U32 WorkingSetSizeOverhead;
  U32 WorkingSetSize;
  struct _KEVENT* ExitEvent;
  struct _EX_PUSH_LOCK WorkingSetMutex;
  void* AccessLog;
} MMSUPPORT, *PMMSUPPORT; 

typedef struct _POOL_DESCRIPTOR
{
  enum _POOL_TYPE PoolType;
  U32 PoolIndex;
  volatile S32 RunningAllocs;
  volatile S32 RunningDeAllocs;
  volatile S32 TotalPages;
  volatile S32 TotalBigPages;
  U32 Threshold;
  void* LockAddress;
  void** volatile PendingFrees;
  volatile S32 ThreadsProcessingDeferrals;
  volatile S32 PendingFreeDepth;
  volatile U32 TotalBytes;
  U32 Spare0;
  struct _LIST_ENTRY ListHeads[512];
} POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR; 

typedef struct _HARDWARE_PTE
{
  struct 
  {
    U32 Valid : 1; 
    U32 Write : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Accessed : 1; 
    U32 Dirty : 1; 
    U32 LargePage : 1; 
    U32 Global : 1; 
    U32 CopyOnWrite : 1; 
    U32 Prototype : 1; 
    U32 reserved : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _MMPTE_HARDWARE
{
  struct 
  {
    U32 Valid : 1; 
    U32 Dirty1 : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Accessed : 1; 
    U32 Dirty : 1; 
    U32 LargePage : 1; 
    U32 Global : 1; 
    U32 CopyOnWrite : 1; 
    U32 Prototype : 1; 
    U32 Write : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; 

typedef struct _MMPTE_PROTOTYPE
{
  struct 
  {
    U32 Valid : 1; 
    U32 ProtoAddressLow : 8; 
    U32 ReadOnly : 1; 
    U32 Prototype : 1; 
    U32 ProtoAddressHigh : 21; 
  }; 
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; 

typedef struct _MMPTE_SOFTWARE
{
  struct 
  {
    U32 Valid : 1; 
    U32 PageFileLow : 4; 
    U32 Protection : 5; 
    U32 Prototype : 1; 
    U32 Transition : 1; 
    U32 PageFileHigh : 20; 
  }; 
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; 

typedef struct _MMPTE_TRANSITION
{
  struct 
  {
    U32 Valid : 1; 
    U32 Write : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Protection : 5; 
    U32 Prototype : 1; 
    U32 Transition : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; 

typedef struct _MMPTE_SUBSECTION
{
  struct 
  {
    U32 Valid : 1; 
    U32 SubsectionAddressLow : 9; 
    U32 Prototype : 1; 
    U32 SubsectionAddressHigh : 21; 
  }; 
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; 

typedef struct _MMPTE_LIST
{
  struct 
  {
    U32 Valid : 1; 
    U32 OneEntry : 1; 
    U32 filler0 : 8; 
    U32 Prototype : 1; 
    U32 filler1 : 1; 
    U32 NextEntry : 20; 
  }; 
} MMPTE_LIST, *PMMPTE_LIST; 

typedef struct _MMPTE
{
  union
  {
    union
    {
      U32 Long;
      volatile U32 VolatileLong;
      struct _HARDWARE_PTE Flush;
      struct _MMPTE_HARDWARE Hard;
      struct _MMPTE_PROTOTYPE Proto;
      struct _MMPTE_SOFTWARE Soft;
      struct _MMPTE_TRANSITION Trans;
      struct _MMPTE_SUBSECTION Subsect;
      struct _MMPTE_LIST List;
    }; 
  } u;
} MMPTE, *PMMPTE; 

typedef struct _MI_SPECIAL_POOL
{
  struct _MMPTE* PteBase;
  struct _MMPTE FreePteHead;
  struct _MMPTE FreePteTail;
  volatile S32 PagesInUse;
  struct _RTL_BITMAP SpecialPoolPdes;
} MI_SPECIAL_POOL, *PMI_SPECIAL_POOL; 

typedef struct _MI_SYSTEM_PTE_TYPE
{
  struct _MMPTE* FirstFreePte;
  U32* FailureCount;
  struct _KGUARDED_MUTEX* GlobalMutex;
  volatile U32 TbFlushTimeStamp;
} MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE; 

typedef struct _MM_SESSION_SPACE
{
  volatile S32 ReferenceCount;
  union
  {
    union
    {
      U32 LongFlags;
      struct _MM_SESSION_SPACE_FLAGS Flags;
    }; 
  } u;
  U32 SessionId;
  volatile S32 ProcessReferenceToSession;
  struct _LIST_ENTRY ProcessList;
  union _LARGE_INTEGER LastProcessSwappedOutTime;
  U32 SessionPageDirectoryIndex;
  volatile U32 NonPagablePages;
  volatile U32 CommittedPages;
  void* PagedPoolStart;
  void* PagedPoolEnd;
  void* SessionObject;
  void* SessionObjectHandle;
  volatile S32 ResidentProcessCount;
  volatile S32 ImageLoadingCount;
  U32 SessionPoolAllocationFailures[4];
  struct _LIST_ENTRY ImageList;
  U32 LocaleId;
  U32 AttachCount;
  struct _KEVENT AttachEvent;
  struct _LIST_ENTRY WsListEntry;
  struct _GENERAL_LOOKASIDE Lookaside[25];
  struct _MMSESSION Session;
  struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  struct _MMSUPPORT Vm;
  struct _MMWSLE* Wsle;
  void* volatile DriverUnload;
  struct _POOL_DESCRIPTOR PagedPool;
  struct _MMPTE* PageTables;
  struct _MI_SPECIAL_POOL SpecialPool;
  struct _KGUARDED_MUTEX SessionPteLock;
  S32 PoolBigEntriesInUse;
  U32 PagedPoolPdeCount;
  U32 SpecialPoolPdeCount;
  U32 DynamicSessionPdeCount;
  struct _MMPTE SessionPteFreeHead;
  struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  void* PoolTrackTableExpansion;
  U32 PoolTrackTableExpansionSize;
  void* PoolTrackBigPages;
  U32 PoolTrackBigPagesSize;
  struct _RTL_BITMAP SessionPoolPdes;
  S32 __PADDING__[5];
} MM_SESSION_SPACE, *PMM_SESSION_SPACE; 

