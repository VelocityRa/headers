typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef struct _SEGMENT_FLAGS
{
  struct 
  {
    U32 TotalNumberOfPtes4132 : 10; 
    U32 ExtraSharedWowSubsections : 1; 
    U32 LargePages : 1; 
    U32 WatchProto : 1; 
    U32 DebugSymbolsLoaded : 1; 
    U32 WriteCombined : 1; 
    U32 NoCache : 1; 
    U32 FloppyMedia : 1; 
    U32 DefaultProtectionMask : 5; 
    U32 ContainsPxeSubsection : 1; 
    U32 Spare : 9; 
  }; 
} SEGMENT_FLAGS, *PSEGMENT_FLAGS; 

typedef struct _HARDWARE_PTE
{
  struct 
  {
    U32 Valid : 1; 
    U32 Write : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Accessed : 1; 
    U32 Dirty : 1; 
    U32 LargePage : 1; 
    U32 Global : 1; 
    U32 CopyOnWrite : 1; 
    U32 Prototype : 1; 
    U32 reserved : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _MMPTE_HARDWARE
{
  struct 
  {
    U32 Valid : 1; 
    U32 Dirty1 : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Accessed : 1; 
    U32 Dirty : 1; 
    U32 LargePage : 1; 
    U32 Global : 1; 
    U32 CopyOnWrite : 1; 
    U32 Prototype : 1; 
    U32 Write : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; 

typedef struct _MMPTE_PROTOTYPE
{
  struct 
  {
    U32 Valid : 1; 
    U32 ProtoAddressLow : 8; 
    U32 ReadOnly : 1; 
    U32 Prototype : 1; 
    U32 ProtoAddressHigh : 21; 
  }; 
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; 

typedef struct _MMPTE_SOFTWARE
{
  struct 
  {
    U32 Valid : 1; 
    U32 PageFileLow : 4; 
    U32 Protection : 5; 
    U32 Prototype : 1; 
    U32 Transition : 1; 
    U32 PageFileHigh : 20; 
  }; 
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; 

typedef struct _MMPTE_TRANSITION
{
  struct 
  {
    U32 Valid : 1; 
    U32 Write : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Protection : 5; 
    U32 Prototype : 1; 
    U32 Transition : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; 

typedef struct _MMPTE_SUBSECTION
{
  struct 
  {
    U32 Valid : 1; 
    U32 SubsectionAddressLow : 9; 
    U32 Prototype : 1; 
    U32 SubsectionAddressHigh : 21; 
  }; 
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; 

typedef struct _MMPTE_LIST
{
  struct 
  {
    U32 Valid : 1; 
    U32 OneEntry : 1; 
    U32 filler0 : 8; 
    U32 Prototype : 1; 
    U32 filler1 : 1; 
    U32 NextEntry : 20; 
  }; 
} MMPTE_LIST, *PMMPTE_LIST; 

typedef struct _MMPTE
{
  union
  {
    union
    {
      U32 Long;
      volatile U32 VolatileLong;
      struct _HARDWARE_PTE Flush;
      struct _MMPTE_HARDWARE Hard;
      struct _MMPTE_PROTOTYPE Proto;
      struct _MMPTE_SOFTWARE Soft;
      struct _MMPTE_TRANSITION Trans;
      struct _MMPTE_SUBSECTION Subsect;
      struct _MMPTE_LIST List;
    }; 
  } u;
} MMPTE, *PMMPTE; 

typedef struct _SEGMENT
{
  struct _CONTROL_AREA* ControlArea;
  U32 TotalNumberOfPtes;
  U32 NonExtendedPtes;
  U32 NumberOfCommittedPages;
  U64 SizeOfSegment;
  union
  {
    struct _MMEXTEND_INFO* ExtendInfo;
    void* BasedAddress;
  }; 
  struct _EX_PUSH_LOCK SegmentLock;
  struct _SEGMENT_FLAGS SegmentFlags;
  union
  {
    union
    {
      U32 ImageCommitment;
      struct _EPROCESS* CreatingProcess;
    }; 
  } u1;
  union
  {
    union
    {
      struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;
      void* FirstMappedVa;
    }; 
  } u2;
  struct _MMPTE* PrototypePte;
  struct _MMPTE ThePtes[1];
  S32 __PADDING__[1];
} SEGMENT, *PSEGMENT; 

