typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    S32 Status;
    void* Pointer;
  }; 
  U64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _KDEVICE_QUEUE_ENTRY
{
  struct _LIST_ENTRY DeviceListEntry;
  U32 SortKey;
  U8 Inserted;
  char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; 

typedef struct _KAPC
{
  U8 Type;
  U8 SpareByte0;
  U8 Size;
  U8 SpareByte1;
  U32 SpareLong0;
  struct _KTHREAD* Thread;
  struct _LIST_ENTRY ApcListEntry;
  void* KernelRoutine;
  void* RundownRoutine;
  void* NormalRoutine;
  void* NormalContext;
  void* SystemArgument1;
  void* SystemArgument2;
  char ApcStateIndex;
  char ApcMode;
  U8 Inserted;
  char __PADDING__[5];
} KAPC, *PKAPC; 

typedef struct _IRP
{
  S16 Type;
  U16 Size;
  struct _MDL* MdlAddress;
  U32 Flags;
  union
  {
    union
    {
      struct _IRP* MasterIrp;
      S32 IrpCount;
      void* SystemBuffer;
    }; 
  } AssociatedIrp;
  struct _LIST_ENTRY ThreadListEntry;
  struct _IO_STATUS_BLOCK IoStatus;
  char RequestorMode;
  U8 PendingReturned;
  char StackCount;
  char CurrentLocation;
  U8 Cancel;
  U8 CancelIrql;
  char ApcEnvironment;
  U8 AllocationFlags;
  struct _IO_STATUS_BLOCK* UserIosb;
  struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          void* UserApcRoutine;
          void* IssuingProcess;
        }; 
        void* UserApcContext;
      } AsynchronousParameters;
      union _LARGE_INTEGER AllocationSize;
    }; 
  } Overlay;
  void* CancelRoutine;
  void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          void* DriverContext[4];
        }; 
        struct _ETHREAD* Thread;
        char* AuxiliaryBuffer;
        struct _LIST_ENTRY ListEntry;
        union
        {
          struct _IO_STACK_LOCATION* CurrentStackLocation;
          U32 PacketType;
        }; 
        struct _FILE_OBJECT* OriginalFileObject;
      } Overlay;
      struct _KAPC Apc;
      void* CompletionKey;
    }; 
  } Tail;
} IRP, *PIRP; 

