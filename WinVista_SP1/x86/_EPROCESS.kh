typedef struct _LIST_ENTRY
{
  struct _LIST_ENTRY* Flink;
  struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; 

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      U8 Type;
      union
      {
        U8 Abandoned;
        U8 Absolute;
        U8 NpxIrql;
        struct
        {
          U8 Signalling;
          union
          {
            U8 Size;
            struct
            {
              U8 Hand;
              union
              {
                U8 Inserted;
                U8 DebugActive;
                U8 DpcActive;
              }; 
            }; 
          }; 
        }; 
      }; 
    }; 
    volatile S32 Lock;
  }; 
  S32 SignalState;
  struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; 

typedef struct _KGDTENTRY
{
  U16 LimitLow;
  U16 BaseLow;
  union
  {
    union
    {
      struct
      {
        U8 BaseMid;
        U8 Flags1;
        U8 Flags2;
        U8 BaseHi;
      } Bytes;
      struct
      {
        struct 
        {
          U32 BaseMid : 8; 
          U32 Type : 5; 
          U32 Dpl : 2; 
          U32 Pres : 1; 
          U32 LimitHi : 4; 
          U32 Sys : 1; 
          U32 Reserved_0 : 1; 
          U32 Default_Big : 1; 
          U32 Granularity : 1; 
          U32 BaseHi : 8; 
        }; 
      } Bits;
    }; 
  } HighWord;
} KGDTENTRY, *PKGDTENTRY; 

typedef struct _KIDTENTRY
{
  U16 Offset;
  U16 Selector;
  U16 Access;
  U16 ExtendedOffset;
} KIDTENTRY, *PKIDTENTRY; 

typedef struct _SINGLE_LIST_ENTRY
{
  struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; 

typedef struct _KEXECUTE_OPTIONS
{
  struct 
  {
    U8 ExecuteDisable : 1; 
    U8 ExecuteEnable : 1; 
    U8 DisableThunkEmulation : 1; 
    U8 Permanent : 1; 
    U8 ExecuteDispatchEnable : 1; 
    U8 ImageDispatchEnable : 1; 
    U8 DisableExceptionChainValidation : 1; 
    U8 Spare : 1; 
  }; 
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS; 

typedef struct _KPROCESS
{
  struct _DISPATCHER_HEADER Header;
  struct _LIST_ENTRY ProfileListHead;
  U32 DirectoryTableBase;
  U32 Unused0;
  struct _KGDTENTRY LdtDescriptor;
  struct _KIDTENTRY Int21Descriptor;
  U16 IopmOffset;
  U8 Unused1;
  U8 Unused2;
  volatile U32 ActiveProcessors;
  U32 KernelTime;
  U32 UserTime;
  struct _LIST_ENTRY ReadyListHead;
  struct _SINGLE_LIST_ENTRY SwapListEntry;
  void* VdmTrapcHandler;
  struct _LIST_ENTRY ThreadListHead;
  U32 ProcessLock;
  U32 Affinity;
  union
  {
    struct 
    {
      volatile S32 AutoAlignment : 1; 
      volatile S32 DisableBoost : 1; 
      volatile S32 DisableQuantum : 1; 
      volatile S32 ReservedFlags : 29; 
    }; 
    volatile S32 ProcessFlags;
  }; 
  char BasePriority;
  char QuantumReset;
  U8 State;
  U8 ThreadSeed;
  U8 PowerState;
  U8 IdealNode;
  U8 Visited;
  union
  {
    struct _KEXECUTE_OPTIONS Flags;
    U8 ExecuteOptions;
  }; 
  U32 StackCount;
  struct _LIST_ENTRY ProcessListEntry;
  volatile U64 CycleTime;
} KPROCESS, *PKPROCESS; 

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct 
    {
      U32 Locked : 1; 
      U32 Waiting : 1; 
      U32 Waking : 1; 
      U32 MultipleShared : 1; 
      U32 Shared : 28; 
    }; 
    U32 Value;
    void* Ptr;
  }; 
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; 

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      U32 LowPart;
      S32 HighPart;
    }; 
    struct
    {
      U32 LowPart;
      S32 HighPart;
    } u;
    S64 QuadPart;
  }; 
} LARGE_INTEGER, *PLARGE_INTEGER; 

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    U32 Count;
    void* Ptr;
  }; 
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; 

typedef struct _EX_FAST_REF
{
  union
  {
    void* Object;
    U32 RefCnt : 3; 
    U32 Value;
  }; 
} EX_FAST_REF, *PEX_FAST_REF; 

typedef struct _HARDWARE_PTE
{
  struct 
  {
    U32 Valid : 1; 
    U32 Write : 1; 
    U32 Owner : 1; 
    U32 WriteThrough : 1; 
    U32 CacheDisable : 1; 
    U32 Accessed : 1; 
    U32 Dirty : 1; 
    U32 LargePage : 1; 
    U32 Global : 1; 
    U32 CopyOnWrite : 1; 
    U32 Prototype : 1; 
    U32 reserved : 1; 
    U32 PageFrameNumber : 20; 
  }; 
} HARDWARE_PTE, *PHARDWARE_PTE; 

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  struct _OBJECT_NAME_INFORMATION* ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO; 

typedef struct _MMSUPPORT_FLAGS
{
  struct 
  {
    U8 SessionSpace : 1; 
    U8 ModwriterAttached : 1; 
    U8 TrimHard : 1; 
    U8 MaximumWorkingSetHard : 1; 
    U8 ForceTrim : 1; 
    U8 MinimumWorkingSetHard : 1; 
    U8 SessionMaster : 1; 
    U8 TrimmerAttached : 1; 
  }; 
  struct 
  {
    U8 TrimmerDetaching : 1; 
    U8 Reserved : 3; 
    U8 PageStealers : 4; 
  }; 
  U8 MemoryPriority : 8; 
  struct 
  {
    U8 WsleDeleted : 1; 
    U8 VmExiting : 1; 
    U8 ExpansionFailed : 1; 
    U8 Available : 5; 
  }; 
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; 

typedef struct _MMSUPPORT
{
  struct _LIST_ENTRY WorkingSetExpansionLinks;
  U16 LastTrimStamp;
  U16 NextPageColor;
  struct _MMSUPPORT_FLAGS Flags;
  U32 PageFaultCount;
  U32 PeakWorkingSetSize;
  U32 ChargedWslePages;
  U32 MinimumWorkingSetSize;
  U32 MaximumWorkingSetSize;
  struct _MMWSL* VmWorkingSetList;
  U32 Claim;
  U32 ActualWslePages;
  U32 WorkingSetPrivateSize;
  U32 WorkingSetSizeOverhead;
  U32 WorkingSetSize;
  struct _KGATE* ExitGate;
  struct _EX_PUSH_LOCK WorkingSetMutex;
  void* AccessLog;
} MMSUPPORT, *PMMSUPPORT; 

typedef struct _MMADDRESS_NODE
{
  union
  {
    union
    {
      S32 Balance : 2; 
      struct _MMADDRESS_NODE* Parent;
    }; 
  } u1;
  struct _MMADDRESS_NODE* LeftChild;
  struct _MMADDRESS_NODE* RightChild;
  U32 StartingVpn;
  U32 EndingVpn;
} MMADDRESS_NODE, *PMMADDRESS_NODE; 

typedef struct _MM_AVL_TABLE
{
  struct _MMADDRESS_NODE BalancedRoot;
  struct 
  {
    U32 DepthOfTree : 5; 
    U32 Unused : 3; 
    U32 NumberGenericTableElements : 24; 
  }; 
  void* NodeHint;
  void* NodeFreeHint;
} MM_AVL_TABLE, *PMM_AVL_TABLE; 

typedef struct _ALPC_PROCESS_CONTEXT
{
  struct _EX_PUSH_LOCK Lock;
  struct _LIST_ENTRY ViewListHead;
  volatile U32 PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT; 

typedef struct _EPROCESS
{
  struct _KPROCESS Pcb;
  struct _EX_PUSH_LOCK ProcessLock;
  union _LARGE_INTEGER CreateTime;
  union _LARGE_INTEGER ExitTime;
  struct _EX_RUNDOWN_REF RundownProtect;
  void* UniqueProcessId;
  struct _LIST_ENTRY ActiveProcessLinks;
  U32 QuotaUsage[3];
  U32 QuotaPeak[3];
  volatile U32 CommitCharge;
  U32 PeakVirtualSize;
  U32 VirtualSize;
  struct _LIST_ENTRY SessionProcessLinks;
  void* DebugPort;
  union
  {
    void* ExceptionPortData;
    U32 ExceptionPortValue;
    U32 ExceptionPortState : 3; 
  }; 
  struct _HANDLE_TABLE* ObjectTable;
  struct _EX_FAST_REF Token;
  U32 WorkingSetPage;
  struct _EX_PUSH_LOCK AddressCreationLock;
  struct _ETHREAD* RotateInProgress;
  struct _ETHREAD* ForkInProgress;
  U32 HardwareTrigger;
  struct _MM_AVL_TABLE* PhysicalVadRoot;
  void* CloneRoot;
  volatile U32 NumberOfPrivatePages;
  volatile U32 NumberOfLockedPages;
  void* Win32Process;
  struct _EJOB* Job;
  void* SectionObject;
  void* SectionBaseAddress;
  struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;
  struct _PAGEFAULT_HISTORY* WorkingSetWatch;
  void* Win32WindowStation;
  void* InheritedFromUniqueProcessId;
  void* LdtInformation;
  void* Spare;
  void* VdmObjects;
  void* DeviceMap;
  void* EtwDataSource;
  void* FreeTebHint;
  union
  {
    struct _HARDWARE_PTE PageDirectoryPte;
    U64 Filler;
  }; 
  void* Session;
  U8 ImageFileName[16];
  struct _LIST_ENTRY JobLinks;
  void* LockedPagesList;
  struct _LIST_ENTRY ThreadListHead;
  void* SecurityPort;
  void* PaeTop;
  volatile U32 ActiveThreads;
  U32 ImagePathHash;
  U32 DefaultHardErrorProcessing;
  S32 LastThreadExitStatus;
  struct _PEB* Peb;
  struct _EX_FAST_REF PrefetchTrace;
  union _LARGE_INTEGER ReadOperationCount;
  union _LARGE_INTEGER WriteOperationCount;
  union _LARGE_INTEGER OtherOperationCount;
  union _LARGE_INTEGER ReadTransferCount;
  union _LARGE_INTEGER WriteTransferCount;
  union _LARGE_INTEGER OtherTransferCount;
  U32 CommitChargeLimit;
  volatile U32 CommitChargePeak;
  void* AweInfo;
  struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  struct _MMSUPPORT Vm;
  struct _LIST_ENTRY MmProcessLinks;
  U32 ModifiedPageCount;
  union
  {
    U32 Flags2;
    struct 
    {
      U32 JobNotReallyActive : 1; 
      U32 AccountingFolded : 1; 
      U32 NewProcessReported : 1; 
      U32 ExitProcessReported : 1; 
      U32 ReportCommitChanges : 1; 
      U32 LastReportMemory : 1; 
      U32 ReportPhysicalPageChanges : 1; 
      U32 HandleTableRundown : 1; 
      U32 NeedsHandleRundown : 1; 
      U32 RefTraceEnabled : 1; 
      U32 NumaAware : 1; 
      U32 ProtectedProcess : 1; 
      U32 DefaultPagePriority : 3; 
      U32 PrimaryTokenFrozen : 1; 
      U32 ProcessVerifierTarget : 1; 
      U32 StackRandomizationDisabled : 1; 
      U32 AffinityPermanent : 1; 
      U32 AffinityUpdateEnable : 1; 
      U32 CrossSessionCreate : 1; 
    }; 
  }; 
  union
  {
    U32 Flags;
    struct 
    {
      U32 CreateReported : 1; 
      U32 NoDebugInherit : 1; 
      U32 ProcessExiting : 1; 
      U32 ProcessDelete : 1; 
      U32 Wow64SplitPages : 1; 
      U32 VmDeleted : 1; 
      U32 OutswapEnabled : 1; 
      U32 Outswapped : 1; 
      U32 ForkFailed : 1; 
      U32 Wow64VaSpace4Gb : 1; 
      U32 AddressSpaceInitialized : 2; 
      U32 SetTimerResolution : 1; 
      U32 BreakOnTermination : 1; 
      U32 DeprioritizeViews : 1; 
      U32 WriteWatch : 1; 
      U32 ProcessInSession : 1; 
      U32 OverrideAddressSpace : 1; 
      U32 HasAddressSpace : 1; 
      U32 LaunchPrefetched : 1; 
      U32 InjectInpageErrors : 1; 
      U32 VmTopDown : 1; 
      U32 ImageNotifyDone : 1; 
      U32 PdeUpdateNeeded : 1; 
      U32 VdmAllowed : 1; 
      U32 SmapAllowed : 1; 
      U32 ProcessInserted : 1; 
      U32 DefaultIoPriority : 3; 
      U32 ProcessSelfDelete : 1; 
      U32 SpareProcessFlags : 1; 
    }; 
  }; 
  S32 ExitStatus;
  U16 Spare7;
  union
  {
    struct
    {
      U8 SubSystemMinorVersion;
      U8 SubSystemMajorVersion;
    }; 
    U16 SubSystemVersion;
  }; 
  U8 PriorityClass;
  struct _MM_AVL_TABLE VadRoot;
  U32 Cookie;
  struct _ALPC_PROCESS_CONTEXT AlpcContext;
  S32 __PADDING__[1];
} EPROCESS, *PEPROCESS; 

